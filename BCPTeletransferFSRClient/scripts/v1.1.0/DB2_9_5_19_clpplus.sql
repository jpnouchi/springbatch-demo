---------------------------
-- DATABASE --
---------------------------

---------------------------
-- BUFFERPOOL --
---------------------------

CREATE BUFFERPOOL "FB_BP4K"  SIZE 5000 PAGESIZE 4096;
CREATE BUFFERPOOL "FB_BP16K"  SIZE 5000 PAGESIZE 16384;

---------------------------
-- TABLESPACE --
---------------------------

CREATE REGULAR TABLESPACE "FB_TS_FILESETS" PAGESIZE 4096 MANAGED BY SYSTEM 
	 USING ('&1/FB_TS_FILESETS01')
	 EXTENTSIZE 16
	 PREFETCHSIZE AUTOMATIC
	 BUFFERPOOL FB_BP4K
	 DROPPED TABLE RECOVERY OFF;

CREATE REGULAR TABLESPACE "FB_TS_FILES" PAGESIZE 4096 MANAGED BY SYSTEM 
	 USING ('&1/FB_TS_FILES01')
	 EXTENTSIZE 16
	 PREFETCHSIZE AUTOMATIC
	 BUFFERPOOL FB_BP4K
	 DROPPED TABLE RECOVERY OFF;

CREATE REGULAR TABLESPACE "FB_TS_METADATA" PAGESIZE 16384 MANAGED BY SYSTEM 
	 USING ('&1/FB_TS_METADATA01')
	 EXTENTSIZE 16
	 PREFETCHSIZE AUTOMATIC
	 BUFFERPOOL FB_BP16K
	 DROPPED TABLE RECOVERY OFF;

CREATE REGULAR TABLESPACE "FB_TS_COMMON" PAGESIZE 4096 MANAGED BY SYSTEM 
	 USING ('&1/FB_TS_COMMON01')
	 EXTENTSIZE 16
	 PREFETCHSIZE AUTOMATIC
	 BUFFERPOOL FB_BP4K
	 DROPPED TABLE RECOVERY OFF;

CREATE REGULAR TABLESPACE "FB_TS_EVENTSDATA" PAGESIZE 16384 MANAGED BY SYSTEM 
	 USING ('&1/FB_TS_EVENTSDATA01')
	 EXTENTSIZE 16
	 PREFETCHSIZE AUTOMATIC
	 BUFFERPOOL FB_BP16K
	 DROPPED TABLE RECOVERY OFF;

---------------------------
-- TABLES --
---------------------------

---------------------------
-- FILEBOX --
---------------------------

CREATE TABLE SPFB_STORAGE_CLASS (
		ID_STORAGE_CLASS INTEGER NOT NULL,
		STORAGE_CLASS_CODE VARCHAR(20),
		DESCRIPTION VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_STORAGE_CLASS ADD CONSTRAINT FB_STO_CLASS_PK PRIMARY KEY (ID_STORAGE_CLASS);

CREATE TABLE SPFB_STORAGE_VOLS (
		ID_VOLUME INTEGER NOT NULL,
		ID_VOLUME_TYPE INTEGER WITH DEFAULT 0,
		ID_STATE INTEGER WITH DEFAULT 0,
		VOLUME_CODE VARCHAR(20),
		DESCRIPTION VARCHAR(256),
		VOLUME_URL VARCHAR(256),
		VOLUME_FREE_LEVEL INTEGER WITH DEFAULT 0
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_STORAGE_VOLS ADD CONSTRAINT FB_STORAGE_VOLS_PK PRIMARY KEY (ID_VOLUME);

CREATE TABLE SPFB_STO_CLASS_VOL (
		ID_STORAGE_CLASS INTEGER NOT NULL,
		ID_VOLUME INTEGER NOT NULL
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_STO_CLASS_VOL ADD CONSTRAINT FB_STO_CL_VOL_PK PRIMARY KEY (ID_STORAGE_CLASS, ID_VOLUME);
ALTER TABLE SPFB_STO_CLASS_VOL ADD CONSTRAINT FB_STO_CL_VOL_FK1 FOREIGN KEY (ID_STORAGE_CLASS) REFERENCES SPFB_STORAGE_CLASS (ID_STORAGE_CLASS);
ALTER TABLE SPFB_STO_CLASS_VOL ADD CONSTRAINT FB_STO_CL_VOL_FK2 FOREIGN KEY (ID_VOLUME)	REFERENCES SPFB_STORAGE_VOLS (ID_VOLUME);

CREATE TABLE SPFB_USER_CLASSES (
		ID_USER_CLASS INTEGER NOT NULL,
		USER_CLASS_CODE VARCHAR(20) NOT NULL,
		DESCRIPTION VARCHAR(256),
		CLASS_TYPE INTEGER WITH DEFAULT 0,
		ID_STORAGE_CLASS INTEGER,
		EXPIRY_AFTER_PUT INTEGER WITH DEFAULT 0,
		EXPIRY_AFTER_READ INTEGER WITH DEFAULT 0,
		DELETE_MODE INTEGER WITH DEFAULT 0,
		ARCHIVING_OPT INTEGER WITH DEFAULT 0,
		CREATION_DATE TIMESTAMP,
		UPDATE_DATE TIMESTAMP
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_USER_CLASSES ADD CONSTRAINT FB_USER_CLASSES_PK PRIMARY KEY (ID_USER_CLASS);
ALTER TABLE SPFB_USER_CLASSES ADD CONSTRAINT FB_USER_CLASS_FK1 FOREIGN KEY (ID_STORAGE_CLASS) REFERENCES SPFB_STORAGE_CLASS (ID_STORAGE_CLASS);
CREATE UNIQUE INDEX FB_USER_CLASSES_IX1 ON SPFB_USER_CLASSES (USER_CLASS_CODE ASC);
	 
CREATE TABLE SPFB_FILESET (
		ID_FILESET BIGINT NOT NULL,
		ID_USER_CLASS INTEGER NOT NULL,
		NUM_FILES INTEGER NOT NULL,
		ID_STATE INTEGER DEFAULT 0 NOT NULL
	) IN "FB_TS_FILESETS";
ALTER TABLE SPFB_FILESET ADD CONSTRAINT FB_FILESET_PK PRIMARY KEY (ID_FILESET);
ALTER TABLE SPFB_FILESET ADD CONSTRAINT FB_FILESET_FK1 FOREIGN KEY (ID_USER_CLASS) REFERENCES SPFB_USER_CLASSES (ID_USER_CLASS);
CREATE SEQUENCE FB_FILESET_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE SPFB_FILESET_SYS_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		CREATION_DATE TIMESTAMP,
		END_DATE TIMESTAMP,
		LAST_UPDATE TIMESTAMP,
		DESCRIPTION VARCHAR(500)
	) IN "FB_TS_FILESETS";
ALTER TABLE SPFB_FILESET_SYS_MD ADD CONSTRAINT SPFB_FILESET_SYS_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_FILESET_SYS_MD ADD CONSTRAINT SPFB_FILESET_SYS_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_FILESET_MD_IX1 ON SPFB_FILESET_SYS_MD (ID_FILESET, ID_FILE ASC);
CREATE INDEX SPFB_FILESET_MD_IX2 ON SPFB_FILESET_SYS_MD (END_DATE ASC)  ALLOW REVERSE SCANS ;
CREATE SEQUENCE FILESET_SYS_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE SPFB_FILES (
		ID_FILE BIGINT NOT NULL,
		ID_VOLUME INTEGER NOT NULL
	) IN "FB_TS_FILES";
ALTER TABLE SPFB_FILES ADD CONSTRAINT FB_FILES_PK PRIMARY KEY (ID_FILE);
ALTER TABLE SPFB_FILES ADD CONSTRAINT FB_FILES_FK1 FOREIGN KEY (ID_VOLUME) REFERENCES SPFB_STORAGE_VOLS (ID_VOLUME);
CREATE SEQUENCE FB_FILES_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
	
CREATE TABLE SPFB_FILES_SYS_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		CREATION_DATE TIMESTAMP,
		END_DATE TIMESTAMP,
		LAST_UPDATE TIMESTAMP,
		ORIGINAL_FILE_NAME VARCHAR(256),
		FILE_HASH VARCHAR(40),
		FILE_URL VARCHAR(512),
		FILE_URN VARCHAR(256),
		FILE_SIZE BIGINT,
		BLOCK_SIZE INTEGER,
		REC_LEN INTEGER,
		FILE_TYPE INTEGER,
		REC_TYPE INTEGER
	) IN "FB_TS_FILES";
ALTER TABLE SPFB_FILES_SYS_MD ADD CONSTRAINT SPFB_FILES_SYS_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_FILES_SYS_MD ADD CONSTRAINT SPFB_FILES_SYS_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_FILES_MD_IX1 ON SPFB_FILES_SYS_MD (ID_FILESET, ID_FILE ASC);
CREATE INDEX SPFB_FILES_MD_IX2 ON SPFB_FILES_SYS_MD (FILE_URL ASC);
CREATE SEQUENCE FILES_SYS_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE SPFB_FILESET_FILES (
		ID_FILE BIGINT NOT NULL,
		ID_CHILD_FILESET BIGINT NOT NULL,
		SEQUENCE INTEGER WITH DEFAULT 0,
		ID_FILESET BIGINT NOT NULL
	) IN "FB_TS_FILESETS";
ALTER TABLE SPFB_FILESET_FILES ADD CONSTRAINT FB_FSET_FILES_PK PRIMARY KEY (ID_FILE, ID_CHILD_FILESET, ID_FILESET);
ALTER TABLE SPFB_FILESET_FILES ADD CONSTRAINT FB_FSET_FILES_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET);
ALTER TABLE SPFB_FILESET_FILES ADD CONSTRAINT FB_FSET_FILES_FK2 FOREIGN KEY (ID_FILE) REFERENCES SPFB_FILES (ID_FILE);

CREATE TABLE SPFB_FILESET_VERSION  (
		  ID_FS_BASE BIGINT NOT NULL , 
		  ID_NEW_VERSION_FS BIGINT NOT NULL , 
		  ID_NEXT_VERSION_FS BIGINT , 
		  ID_PREV_VERSION_FS BIGINT 
	) IN "FB_TS_FILESETS";   
ALTER TABLE SPFB_FILESET_VERSION ADD CONSTRAINT FSET_VERSION_PK PRIMARY KEY (ID_FS_BASE, ID_NEW_VERSION_FS);
ALTER TABLE SPFB_FILESET_VERSION ADD CONSTRAINT FSET_VERSION_FK FOREIGN KEY	(ID_FS_BASE) REFERENCES SPFB_FILESET (ID_FILESET);
ALTER TABLE SPFB_FILESET_VERSION ADD CONSTRAINT FSET_VERSION_FK1 FOREIGN KEY (ID_NEW_VERSION_FS) REFERENCES SPFB_FILESET (ID_FILESET);
CREATE TABLE SPFB_META_CLASS (
		ID_METADATA_CLASS INTEGER NOT NULL,
		CLASS_NAME VARCHAR(128),
		CLASS_TYPE INTEGER  NOT NULL WITH DEFAULT 0,
		JAVA_CLASS VARCHAR(256),
		DESCRIPTION VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_META_CLASS ADD CONSTRAINT FB_META_CLASS_PK PRIMARY KEY (ID_METADATA_CLASS);

CREATE TABLE SPFB_META_TYPE (
		ID_METADATA_TYPE INTEGER NOT NULL,
		TYPE_NAME VARCHAR(20),
		DBMS_NAME VARCHAR(20),
		DB_TYPE VARCHAR(20),
		DESCRIPTION VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_META_TYPE ADD CONSTRAINT FB_META_TYPE_PK PRIMARY KEY (ID_METADATA_TYPE);

CREATE TABLE SPFB_METADATA (
		ID_METADATA INTEGER NOT NULL,
		ID_METADATA_TYPE INTEGER NOT NULL,
		METADATA_NAME VARCHAR(32) NOT NULL,
		METADATA_DESCRIPTION VARCHAR(128),
		LENGTH INTEGER NOT NULL,
		PRECISION INTEGER
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_METADATA ADD CONSTRAINT FB_METADATA_PK PRIMARY KEY (ID_METADATA);
ALTER TABLE SPFB_METADATA ADD CONSTRAINT FB_METADATA_FK1 FOREIGN KEY (ID_METADATA_TYPE)	REFERENCES SPFB_META_TYPE (ID_METADATA_TYPE);

CREATE TABLE SPFB_META_CLASS_STRUCT (
		ID_METADATA_CLASS INTEGER NOT NULL,
		ID_METADATA INTEGER NOT NULL,
		STATUS SMALLINT NOT NULL WITH DEFAULT 0,
		METADATA_ORDER INTEGER NOT NULL 
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_META_CLASS_STRUCT ADD CONSTRAINT SPFB_MDCL_STRU_PK PRIMARY KEY (ID_METADATA_CLASS, ID_METADATA);
ALTER TABLE SPFB_META_CLASS_STRUCT ADD CONSTRAINT SPFB_MDCL_STRU_FK FOREIGN KEY (ID_METADATA_CLASS) REFERENCES SPFB_META_CLASS (ID_METADATA_CLASS);
ALTER TABLE SPFB_META_CLASS_STRUCT ADD CONSTRAINT SPFB_MDCL_STRU_FK1 FOREIGN KEY (ID_METADATA) REFERENCES SPFB_METADATA (ID_METADATA);
	CREATE TABLE SPMFTS_CFG_MODULES (
		ID_MODULE INTEGER NOT NULL,
		CODE VARCHAR(64) NOT NULL,
		DESCRIPTION VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPMFTS_CFG_MODULES ADD CONSTRAINT SPMFTS_CFG_MODULES_PK PRIMARY KEY (ID_MODULE);
CREATE SEQUENCE SPMFTS_CFG_MODULES_SEQ AS INTEGER START WITH 4 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPMFTS_CFG_SECTION_TYPE (
		ID_SECTION_TYPE INTEGER NOT NULL,
		ID_MODULE INTEGER NOT NULL,
		SECTION_CODE VARCHAR(64) NOT NULL,
		DESCRIPTION VARCHAR(256),
		SECTION_HELP VARCHAR(2048),
		DEFAULT_SECTION_NAME VARCHAR(64),
		REQUIRED INTEGER DEFAULT 0 NOT NULL,
		MULTIPLE INTEGER NOT NULL
	) IN "FB_TS_COMMON";
ALTER TABLE SPMFTS_CFG_SECTION_TYPE ADD CONSTRAINT SPMFTS_CFG_SECTION_TYPE_PK PRIMARY KEY (ID_SECTION_TYPE);
CREATE SEQUENCE SPMFTS_CFG_SECTION_TYPE_SEQ AS INTEGER START WITH 100 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPMFTS_CFG_SEC_STRUCT (
		ID_STRUCT INTEGER NOT NULL,
		ID_SECTION INTEGER NOT NULL,
		PROP_NAME VARCHAR(128) NOT NULL,
		PROP_TYPE INTEGER DEFAULT 0 NOT NULL,
		DESCRIPTION VARCHAR(256),
		PROP_HELP VARCHAR(2048),
		DEFAULT_VALUE VARCHAR(256),
		MAX_LENGTH INTEGER,
		CHAR_SET VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPMFTS_CFG_SEC_STRUCT ADD CONSTRAINT SPMFTS_CFG_SEC_STRUCT_PK PRIMARY KEY (ID_STRUCT);
CREATE SEQUENCE SPMFTS_CFG_SEC_STRUCT_SEQ AS INTEGER START WITH 1000 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPMFTS_CONFIGURATION (
		ID_ROW INTEGER NOT NULL,
		ID_MODULE INTEGER NOT NULL,
		ID_SECTION INTEGER NOT NULL,
		SEC_ORDER VARCHAR(10),
		SECTION_NAME VARCHAR(128),
		PROPERTY_NAME VARCHAR(128) NOT NULL,
		PROPERTY_VALUE VARCHAR(512) NOT NULL
	) IN "FB_TS_COMMON";
ALTER TABLE SPMFTS_CONFIGURATION ADD CONSTRAINT SPMFTS_CONFIGURATION_PK PRIMARY KEY (ID_ROW);
CREATE SEQUENCE SPMFTS_CONFIGURATION_SEQ AS INTEGER START WITH 1000 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE SPMFTS_APPLICATION_LOG (
		ROW_ID BIGINT NOT NULL,
		TIME_STAMP TIMESTAMP NOT NULL,
		LOG_TYPE VARCHAR(10),
		OPERATION VARCHAR(256),
		LOG_ROW VARCHAR(2048)
	) IN "FB_TS_COMMON";
ALTER TABLE SPMFTS_APPLICATION_LOG ADD CONSTRAINT SPMFTS_APPLICATION_LOG_PK PRIMARY KEY (ROW_ID);
CREATE INDEX SPMFTS_APPLICATION_LOG_IX1 ON SPMFTS_APPLICATION_LOG (TIME_STAMP);
CREATE SEQUENCE SP_APPLICATION_LOG_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE SPFB_FILE_TYPES (
		ID_FILETYPE INTEGER NOT NULL,
		FILETYPECODE VARCHAR(20),
		DESCRIPTION VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_FILE_TYPES ADD CONSTRAINT FB_FILE_TYPES_PK PRIMARY KEY (ID_FILETYPE);

CREATE TABLE SPFB_REC_TYPES (
		ID_RECTYPE INTEGER NOT NULL,
		RECTYPECODE VARCHAR(20),
		DESCRIPTION VARCHAR(256)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_REC_TYPES ADD CONSTRAINT FB_REC_TYPES_PK PRIMARY KEY (ID_RECTYPE);

CREATE TABLE SPFB_REQUESTS (
		ID_REQUEST BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		ID_REQUEST_TYPE INTEGER WITH DEFAULT 0,
		ID_STATUS INTEGER WITH DEFAULT 0,
		REPLY_TO_URN VARCHAR(256),
		REQUEST_DATE TIMESTAMP,
		START_TIME TIMESTAMP,
		END_TIME TIMESTAMP,
		ACKNOWLEDGE_DATE TIMESTAMP,
		SOURCE_URL VARCHAR(256),
		BYTE_TOTAL BIGINT,
		BYTE_CURRENT BIGINT,
		VOLUME_TYPE INTEGER NOT NULL,
		VOLUME_ID INTEGER NOT NULL,
		ERROR_CODE VARCHAR(12),
		ERROR_MESSAGE VARCHAR(512)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_REQUESTS ADD CONSTRAINT SPFB_REQUESTS_PK PRIMARY KEY (ID_REQUEST);
ALTER TABLE SPFB_REQUESTS ADD CONSTRAINT FB_REQUESTS_FK2 FOREIGN KEY (ID_FILE) REFERENCES SPFB_FILES (ID_FILE);
ALTER TABLE SPFB_REQUESTS ADD CONSTRAINT FB_REQUESTS_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET);

CREATE TABLE SPFB_DB_STORAGE (
		ID_DB_FILE BIGINT NOT NULL,
		FILE_LENGTH BIGINT NOT NULL,
		FILE_DATA BLOB(1073741824)
	) IN "FB_TS_COMMON";
ALTER TABLE SPFB_DB_STORAGE ADD CONSTRAINT SPFB_DB_STORAGE_PK PRIMARY KEY (ID_DB_FILE);

CREATE TABLE SPRST_SESS_LOG (
		ROW_ID BIGINT NOT NULL,
		TIME_STAMP TIMESTAMP NOT NULL,
		ID_OPERATION INTEGER WITH DEFAULT 0,
		ID_SESSION BIGINT NOT NULL
	) IN "FB_TS_COMMON";
ALTER TABLE SPRST_SESS_LOG ADD CONSTRAINT RST_SESS_LOG_PK PRIMARY KEY (ROW_ID);

CREATE TABLE SPMFTS_COUNTERS (
		ID_COUNTER INTEGER NOT NULL,
		LAST_VALUE BIGINT DEFAULT 0 NOT NULL,
		DESCRIPTION VARCHAR(32)
	) IN "FB_TS_COMMON";
ALTER TABLE SPMFTS_COUNTERS ADD CONSTRAINT MFTS_COUNTERS_PK PRIMARY KEY (ID_COUNTER);

CREATE TABLE SPRST_SESSIONS (
		ID_SESSION BIGINT NOT NULL,
		ID_PARENT_SESSION BIGINT,
		ID_STATUS INTEGER NOT NULL,
		FILE_SET_ID BIGINT,
		FILE_ID BIGINT,
		SESSION_HASH CHAR(28) NOT NULL,
		SESSION_STRING BLOB(128000) NOT NULL,
		BLOCK_TOTAL BIGINT,
		BYTE_TOTAL BIGINT,
		BLOCK_RECEIVED BIGINT,
		BYTE_RECEIVED BIGINT,
		CREATION_DATE TIMESTAMP NOT NULL,
		LAST_UPDATE TIMESTAMP,
		TIMEOUT INTEGER NOT NULL,
		EXPIRATION_DATE TIMESTAMP NOT NULL,
		SESSION_TYPE INTEGER NOT NULL,
		OPERATION_TYPE INTEGER NOT NULL,
		USER_ID VARCHAR(50)
	) IN "FB_TS_COMMON";
ALTER TABLE SPRST_SESSIONS ADD CONSTRAINT SPRST_SESSIONS_PK PRIMARY KEY (ID_SESSION);
	
---------------------------
-- FSEE --
---------------------------

CREATE TABLE  SPFB_FILESET_MON_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		FILESET_STATUS INTEGER NOT NULL,
		EXPORT_STATUS INTEGER NOT NULL,
		FSEE_UNIQUE_ID BIGINT,
		FILE_NAME VARCHAR(256) NOT NULL,
		FILE_IDENTITY VARCHAR(64),
		HOST_NAME VARCHAR(256) NOT NULL,
		PLATFORM VARCHAR(32),
		USAGE_COUNT INTEGER,
		CREATION_TS TIMESTAMP NOT NULL,
		LAST_OPER_TS TIMESTAMP NOT NULL,
		DELETE_TS TIMESTAMP
	) IN "FB_TS_METADATA";
ALTER TABLE SPFB_FILESET_MON_MD ADD CONSTRAINT SPFB_FS_MON_MD_PK PRIMARY KEY (ID_ROW); 
ALTER TABLE SPFB_FILESET_MON_MD ADD CONSTRAINT SPFB_FILESET_MON_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_FS_MON_MD_IX1 ON SPFB_FILESET_MON_MD(ID_FILESET, ID_FILE ASC);
CREATE INDEX SPFB_FS_MON_MD_IX2 ON SPFB_FILESET_MON_MD(FILE_NAME ASC);
CREATE SEQUENCE FILESET_MON_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE  SPFB_FILESET_LOG_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		FB_TIMESTAMP TIMESTAMP NOT NULL,
		OPERATION INTEGER NOT NULL,
		OPER_TIMESTAMP TIMESTAMP,
		TRANSFER_ID VARCHAR(256),
		HOST_NAME VARCHAR(256),
		SYSTEM_ID VARCHAR(32),
		SYSPLEX_NAME VARCHAR(8),
		JES2_JOB_ID VARCHAR(8),
		JOB_TIMESTAMP_ID TIMESTAMP,
		JOB_NAME VARCHAR(8),
		STEP_NAME VARCHAR(8),
		PGM_NAME VARCHAR(256),
		USER_ID VARCHAR(256),
		OPEN_TYPE VARCHAR(32),
		OPEN_DISP VARCHAR(4),
		DD_NAME VARCHAR(8),
		MEMBER_NAME VARCHAR(8),
		FILE_ORG VARCHAR(2),
		FILE_RECFM VARCHAR(4),
		STEP_ABEND_CODE VARCHAR(8),
		STEP_CONDITION_CODE VARCHAR(8),
		STEP_COMPLETION_CODE VARCHAR(8),
		FILE_SIZE BIGINT,
		NEW_FILESET_ID BIGINT,
		NEW_FILE_ID BIGINT,
		FLOW_INSTANCE_ID BIGINT,
		OLD_FILE_NAME VARCHAR(256),
		OLD_FILE_IDENTITY VARCHAR(64),
		PARENT_ID VARCHAR(16),
		PROCESS_ID VARCHAR(16),
		THREAD_ID VARCHAR(16),
		MSG_SEND_TIMESTAMP    VARCHAR(32),
		MSG_RECEIVE_TIMESTAMP VARCHAR(32)
	) IN "FB_TS_METADATA" ;
ALTER TABLE SPFB_FILESET_LOG_MD ADD CONSTRAINT SPFB_FS_LOG_MD_PK PRIMARY KEY (ID_ROW); 
ALTER TABLE SPFB_FILESET_LOG_MD ADD CONSTRAINT SPFB_FILESET_LOG_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_FS_LOG_MD_IX1 ON SPFB_FILESET_LOG_MD (ID_FILESET, ID_FILE ASC); 
CREATE INDEX SPFB_FS_LOG_MD_IX2 ON SPFB_FILESET_LOG_MD (OPER_TIMESTAMP, OPERATION); 
CREATE INDEX SPFB_FS_LOG_MD_IX3 ON SPFB_FILESET_LOG_MD (JOB_TIMESTAMP_ID, SYSTEM_ID, JES2_JOB_ID, STEP_NAME);
CREATE SEQUENCE FILESET_LOG_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20; 

CREATE TABLE SPFB_FSEE_EVENTS_QUEUE (
		ID_ROW BIGINT NOT NULL,
		FB_RECEIVE_TIMESTAMP TIMESTAMP NOT NULL,
		EVENT_KEY VARCHAR(1024),
		FSEE_EVENT VARCHAR(4000) NOT NULL
	) IN "FB_TS_METADATA" ;
ALTER TABLE SPFB_FSEE_EVENTS_QUEUE ADD CONSTRAINT SPFB_FSEE_EVENTS_PK PRIMARY KEY (ID_ROW); 
CREATE INDEX SPFB_FS_EVENT_QUEUE_IX1 ON SPFB_FSEE_EVENTS_QUEUE (EVENT_KEY, FB_RECEIVE_TIMESTAMP);
CREATE SEQUENCE FB_FSEE_EVENTS_QUEUE_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20; 

CREATE TABLE SPFB_FSEE_WAIT_QUEUE (
		ID_ROW BIGINT NOT NULL,
		FB_TIMESTAMP TIMESTAMP NOT NULL,
		ID_MODULE INTEGER NOT NULL,
		FSEE_MESSAGE VARCHAR(4000) NOT NULL
	) IN "FB_TS_METADATA" ;
ALTER TABLE SPFB_FSEE_WAIT_QUEUE ADD CONSTRAINT SPFB_FSEE_WAIT_PK PRIMARY KEY (ID_ROW); 
CREATE SEQUENCE FB_FSEE_WAIT_QUEUE_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE  SPFB_SPRING_BATCH_JOB_MD (
	ID_ROW BIGINT NOT NULL,
	ID_FILESET BIGINT NOT NULL,
	ID_FILE BIGINT,
	JOB_STATUS NUMERIC(5 , 0) NOT NULL,
	JOB_ID VARCHAR(256) NOT NULL,
	JOB_NAME VARCHAR(256) NOT NULL,
	HOST_NAME VARCHAR(256) NOT NULL,
	PLATFORM VARCHAR(32),
	JOB_START_TS TIMESTAMP NOT NULL,
	JOB_LAST_OPER_TS TIMESTAMP NOT NULL,
	JOB_END_TS TIMESTAMP
	) IN "FB_TS_METADATA" ;
ALTER TABLE SPFB_SPRING_BATCH_JOB_MD ADD CONSTRAINT SPFB_SPRING_BATCH_JOB_MD_PK PRIMARY KEY (ID_ROW); 
ALTER TABLE SPFB_SPRING_BATCH_JOB_MD ADD CONSTRAINT SPFB_SPRING_BATCH_JOB_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE SEQUENCE SPRING_BATCH_JOB_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20; 

CREATE TABLE SPFB_SPRING_BATCH_LOG_MD (
	ID_ROW BIGINT NOT NULL,
	ID_FILESET BIGINT NOT NULL,
	ID_FILE BIGINT,
	FB_TIMESTAMP TIMESTAMP NOT NULL,
	OPERATION INTEGER NOT NULL,
	OPER_TIMESTAMP TIMESTAMP,
	HOST_NAME VARCHAR(256),
	STEP_NAME VARCHAR(256),
	USER_ID VARCHAR(256),
	OPEN_TYPE VARCHAR(32),
	STEP_ABEND_CODE VARCHAR(16),
	STEP_CONDITION_CODE VARCHAR(16),
	STEP_COMPLETION_CODE VARCHAR(16),
	FILE_SIZE BIGINT,
	FILE_NAME VARCHAR(256),
	DATABASE_URL VARCHAR(512),
	SQL_QUERY VARCHAR(4000),
	PROCESS_ID VARCHAR(16),
	MSG_SEND_TIMESTAMP    VARCHAR(32),
	MSG_RECEIVE_TIMESTAMP VARCHAR(32),
	FSEE_FILESET_ID BIGINT,
	FSEE_FILE_ID BIGINT
	) IN "FB_TS_METADATA" ;
ALTER TABLE SPFB_SPRING_BATCH_LOG_MD ADD CONSTRAINT SPFB_SPRING_BATCH_LOG_MD_PK PRIMARY KEY (ID_ROW); 
ALTER TABLE SPFB_SPRING_BATCH_LOG_MD ADD CONSTRAINT SPFB_SPRING_BATCH_LOG_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE SEQUENCE SPRING_BATCH_LOG_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20; 

---------------------------------------
CREATE TABLE SPFB_FILE_INSTANCES (
  ID_FILESET             BIGINT         NOT NULL,
  FSEE_UNIQUE_ID         BIGINT         ,
  FILESET_STATUS         INTEGER        NOT NULL,
  EXPORT_STATUS          INTEGER        NOT NULL,
  USAGE_COUNT            INTEGER
) IN "FB_TS_METADATA";
ALTER TABLE SPFB_FILE_INSTANCES APPEND ON;
ALTER TABLE SPFB_FILE_INSTANCES ADD CONSTRAINT SPFB_FILE_INSTANCES_PK PRIMARY KEY (ID_FILESET); 
CREATE UNIQUE INDEX SPFB_FILE_INSTANCES_IDX1 ON SPFB_FILE_INSTANCES (ID_FILESET ASC) INCLUDE (
  FSEE_UNIQUE_ID      ,
  FILESET_STATUS      ,
  EXPORT_STATUS       ,
  USAGE_COUNT         
) ALLOW REVERSE SCANS;

CREATE TABLE SPFB_FILE_EVENTS_SETS (
  ID_FILE_EVENTS_SET     BIGINT         NOT NULL,
  ID_FILE_EVENT_BEGIN    BIGINT         ,
  ID_FILE_EVENT_END      BIGINT         ,
  ID_FILESET             BIGINT         NOT NULL
) IN "FB_TS_METADATA";
ALTER TABLE SPFB_FILE_EVENTS_SETS APPEND ON;
CREATE SEQUENCE SPFB_FILE_EVENTS_SETS_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_FILE_EVENTS_SETS ADD CONSTRAINT SPFB_FILE_EVENTS_SETS_PK PRIMARY KEY (ID_FILE_EVENTS_SET); 
CREATE UNIQUE INDEX SPFB_FILE_EVENTS_SETS_IDX1 ON SPFB_FILE_EVENTS_SETS (ID_FILE_EVENTS_SET ASC) INCLUDE (
  ID_FILESET,
  ID_FILE_EVENT_END,
  ID_FILE_EVENT_BEGIN
) ALLOW REVERSE SCANS;
CREATE INDEX SPFB_FILE_EVENTS_SETS_IDX2 ON SPFB_FILE_EVENTS_SETS (ID_FILESET);

CREATE TABLE SPFB_FILE_IDENTITIES (
  ID_FILE_IDENTITY    INTEGER      NOT NULL,
  FILE_IDENTITY       VARCHAR(280) NOT NULL, -- pk
  FILE_NAME           VARCHAR(256) NOT NULL,
  HOST_NAME           VARCHAR(16)  ,
  CLUSTER_NAME        VARCHAR(16)  ,
  PLATFORM            VARCHAR(32)
) IN "FB_TS_METADATA";
ALTER TABLE SPFB_FILE_IDENTITIES APPEND ON;
CREATE SEQUENCE SPFB_FILE_IDENTITIES_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_FILE_IDENTITIES ADD CONSTRAINT SPFB_FILE_IDENTITIES_PK PRIMARY KEY (ID_FILE_IDENTITY);
CREATE UNIQUE INDEX SPFB_FILE_IDENTITIES_IDX1 ON SPFB_FILE_IDENTITIES (FILE_IDENTITY ASC) INCLUDE (
  ID_FILE_IDENTITY    ,
  FILE_NAME           ,
  HOST_NAME           ,
  CLUSTER_NAME        ,
  PLATFORM            
) ALLOW REVERSE SCANS;

CREATE TABLE SPFB_JOB_EXECUTIONS (
  ID_JOB_EXECUTION       BIGINT         NOT NULL,
  SYSTEM_ID              VARCHAR(32)    NOT NULL, -- pk
  JOB_TIMESTAMP_ID       TIMESTAMP      NOT NULL, -- pk
  JOB_NAME               VARCHAR(8)     NOT NULL, -- pk
  JES2_JOB_ID            VARCHAR(8)     ,
  START_TIMESTAMP        TIMESTAMP      ,
  END_TIMESTAMP          TIMESTAMP      ,
  USER_ID                VARCHAR(8)     ,
  JOB_ABEND_CODE         VARCHAR(8)     ,
  JOB_CONDITION_CODE     VARCHAR(8)     ,
  JOB_COMPLETION_CODE    VARCHAR(8)     
) IN "FB_TS_METADATA";
ALTER TABLE SPFB_JOB_EXECUTIONS APPEND ON;
CREATE SEQUENCE SPFB_JOB_EXECUTIONS_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_JOB_EXECUTIONS ADD CONSTRAINT SPFB_JOB_EXECUTIONS_PK PRIMARY KEY (ID_JOB_EXECUTION); 
CREATE UNIQUE INDEX SPFB_JOB_EXECUTIONS_IDX1 ON SPFB_JOB_EXECUTIONS (ID_JOB_EXECUTION) INCLUDE (
  SYSTEM_ID              ,
  JOB_TIMESTAMP_ID       ,
  JOB_NAME               ,
  JES2_JOB_ID            ,
  START_TIMESTAMP        ,
  END_TIMESTAMP          ,
  USER_ID                ,
  JOB_ABEND_CODE         ,
  JOB_CONDITION_CODE     ,
  JOB_COMPLETION_CODE    
) ALLOW REVERSE SCANS  ;
CREATE UNIQUE INDEX SPFB_JOB_EXECUTIONS_IDX2 ON SPFB_JOB_EXECUTIONS (SYSTEM_ID ASC, JOB_TIMESTAMP_ID ASC, JOB_NAME ASC) INCLUDE (
  ID_JOB_EXECUTION       ,
  JES2_JOB_ID            ,
  START_TIMESTAMP        ,
  END_TIMESTAMP          ,
  USER_ID                ,
  JOB_ABEND_CODE         ,
  JOB_CONDITION_CODE     ,
  JOB_COMPLETION_CODE    
) ALLOW REVERSE SCANS  ;

insert into SPFB_JOB_EXECUTIONS (ID_JOB_EXECUTION,SYSTEM_ID,JOB_TIMESTAMP_ID,JOB_NAME) values (0,' ','1900-01-01 00:00:00.000000',' ');

CREATE TABLE SPFB_JOB_EXECUTION_STEPS (
  ID_JOB_EXECUTION_STEP  BIGINT         NOT NULL,
  ID_JOB_EXECUTION       BIGINT         NOT NULL, -- pk
  STEP_NAME              VARCHAR(8)     NOT NULL, -- pk
  STEP_ABEND_CODE        VARCHAR(8)     ,
  STEP_CONDITION_CODE    VARCHAR(8)     ,
  STEP_COMPLETION_CODE   VARCHAR(8)     
) IN "FB_TS_METADATA";
ALTER TABLE SPFB_JOB_EXECUTION_STEPS APPEND ON;
CREATE SEQUENCE SPFB_JOB_EXECUTION_STEPS_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_JOB_EXECUTION_STEPS ADD CONSTRAINT SPFB_JOB_EXECUTION_STEPS_PK PRIMARY KEY (ID_JOB_EXECUTION_STEP); 
CREATE UNIQUE INDEX SPFB_JOB_EXECUTION_STEPS_IDX1 ON SPFB_JOB_EXECUTION_STEPS (ID_JOB_EXECUTION, STEP_NAME);

insert into SPFB_JOB_EXECUTION_STEPS (ID_JOB_EXECUTION_STEP,ID_JOB_EXECUTION,STEP_NAME) values (0,0,' ');

CREATE TABLE SPFB_FILE_TRANSFERS (
  ID_FILE_TRANSFER       BIGINT         NOT NULL,
  TRANSFER_ID            VARCHAR(256)   ,
  FLOW_INSTANCE_ID       BIGINT         ,
  ID_FILE_EVENT_FROM     BIGINT         ,
  ID_FILE_EVENT_TO       BIGINT         ,
  ID_FILE_EVENT_ERROR    BIGINT         
) IN "FB_TS_METADATA";
ALTER TABLE SPFB_FILE_TRANSFERS APPEND ON;
CREATE SEQUENCE SPFB_FILE_TRANSFERS_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_FILE_TRANSFERS ADD CONSTRAINT SPFB_FILE_TRANSFERS_PK PRIMARY KEY (ID_FILE_TRANSFER); 
CREATE UNIQUE INDEX SPFB_FILE_TRANSFERS_IDX1 ON SPFB_FILE_TRANSFERS (TRANSFER_ID);

CREATE TABLE SPFB_FILE_EVENTS (
  ID_FILE_EVENT          BIGINT         NOT NULL,
  ID_FILE_EVENTS_SET     BIGINT         ,
  ID_FILE_IDENTITY       INTEGER        NOT NULL, -- pk
  OPER_TIMESTAMP         TIMESTAMP      NOT NULL, -- pk
  OPERATION_TYPE         INTEGER        NOT NULL, -- pk
  OPER_HOST_NAME         VARCHAR(16)    NOT NULL, -- pk
  ID_JOB_EXECUTION_STEP  BIGINT         NOT NULL, -- pk
  PGM_NAME               VARCHAR(256)   ,
  ID_FILE_EVENT_RENAME   BIGINT         ,
  INSERT_TIMESTAMP       TIMESTAMP      NOT NULL,
  CORRELATION_TIMESTAMP  TIMESTAMP      ,
  USER_ID                VARCHAR(256)   ,
  OPEN_TYPE              VARCHAR(32)    ,
  OPEN_DISP              VARCHAR(4)     ,
  DD_NAME                VARCHAR(8)     ,
  MEMBER_NAME            VARCHAR(8)     ,
  FILE_ORG               VARCHAR(2)     ,
  FILE_RECFM             VARCHAR(4)     ,
  FILE_SIZE              BIGINT         ,
  ID_FILE_TRANSFER       BIGINT         ,
  PARENT_ID              VARCHAR(16)    , -- x mini
  PROCESS_ID             VARCHAR(16)    , -- x mini
  THREAD_ID              VARCHAR(16)    , -- x mini
  MSG_SEND_TIMESTAMP     TIMESTAMP      ,
  MSG_RECEIVE_TIMESTAMP  TIMESTAMP
)
IN "FB_TS_EVENTSDATA";

ALTER TABLE SPFB_FILE_EVENTS APPEND ON;

CREATE SEQUENCE SPFB_FILE_EVENTS_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_FILE_EVENTS ADD CONSTRAINT SPFB_FILE_EVENTS_PK PRIMARY KEY (ID_FILE_EVENT); 
CREATE UNIQUE INDEX SPFB_FILE_EVENTS_UIDX ON SPFB_FILE_EVENTS (ID_FILE_IDENTITY , OPER_TIMESTAMP , OPERATION_TYPE , OPER_HOST_NAME, ID_JOB_EXECUTION_STEP) ALLOW REVERSE SCANS;
CREATE UNIQUE INDEX SPFB_FILE_EVENTS_IDX1 ON SPFB_FILE_EVENTS (ID_FILE_EVENT ASC) INCLUDE (
  ID_FILE_EVENTS_SET     ,
  ID_FILE_IDENTITY       ,
  OPER_TIMESTAMP         ,
  OPERATION_TYPE         ,
  OPER_HOST_NAME         ,
  ID_JOB_EXECUTION_STEP  ,
  PGM_NAME               ,
  ID_FILE_EVENT_RENAME   ,
  INSERT_TIMESTAMP       ,
  CORRELATION_TIMESTAMP  ,
  USER_ID                ,
  OPEN_TYPE              ,
  OPEN_DISP              ,
  DD_NAME                ,
  MEMBER_NAME            ,
  FILE_ORG               ,
  FILE_RECFM             ,
  FILE_SIZE              ,
  ID_FILE_TRANSFER       ,
  PARENT_ID              ,
  PROCESS_ID             ,
  THREAD_ID              ,
  MSG_SEND_TIMESTAMP     ,
  MSG_RECEIVE_TIMESTAMP  
) COMPRESS YES ALLOW REVERSE SCANS ;
CREATE INDEX SPFB_FILE_EVENTS_IDX2 ON SPFB_FILE_EVENTS (ID_JOB_EXECUTION_STEP);
CREATE INDEX SPFB_FILE_EVENTS_IDX3 ON SPFB_FILE_EVENTS (ID_FILE_EVENTS_SET ASC, ID_FILE_IDENTITY ASC, OPER_TIMESTAMP ASC) COMPRESS YES ALLOW REVERSE SCANS ;

CREATE or REPLACE VIEW FSEE_FILE_EVENTS_VIEW (
  ID_FILE_EVENT             ,
  ID_FILE_IDENTITY          ,
  FILE_IDENTITY             ,
  FILE_NAME                 ,
  HOST_NAME                 ,
  CLUSTER_NAME              ,
  OPER_TIMESTAMP            ,
  OPERATION_TYPE            ,
  OPER_HOST_NAME            ,
  ID_FILE_EVENT_RENAME      ,
  ID_JOB_EXECUTION          ,
  JOB_NAME                  ,
  SYSTEM_ID                 ,
  JES2_JOB_ID               ,
  JOB_TIMESTAMP_ID          ,
  JOB_ABEND_CODE            ,
  JOB_CONDITION_CODE        ,
  JOB_COMPLETION_CODE       ,
  STEP_NAME                 ,
  PGM_NAME                  ,
  STEP_ABEND_CODE           ,
  STEP_CONDITION_CODE       ,
  STEP_COMPLETION_CODE      ,
  OPEN_TYPE                 ,
  OPEN_DISP                 ,
  DD_NAME                   ,
  MEMBER_NAME               ,
  FILE_ORG                  ,
  FILE_RECFM                ,
  FILE_SIZE                 ,
  TRANSFER_ID               ,
  FLOW_INSTANCE_ID          ,
  PARENT_ID                 ,
  PROCESS_ID                ,
  THREAD_ID                 ,
  MSG_SEND_TIMESTAMP        ,
  MSG_RECEIVE_TIMESTAMP     ,
  INSERT_TIMESTAMP          ,
  CORRELATION_TIMESTAMP     ,
  ID_FILE_EVENTS_SET        ,
  ID_FILE_EVENT_BEGIN       ,
  ID_FILE_EVENT_END         ,
  ID_FILESET                ,
  FSEE_UNIQUE_ID            ,
  FILESET_STATUS            ,
  EXPORT_STATUS             ,
  USAGE_COUNT               ,
  RENAME_COUNT
) AS
  SELECT
    B.ID_FILE_EVENT         ,
    A.ID_FILE_IDENTITY      ,
    A.FILE_IDENTITY         ,
    A.FILE_NAME             ,
    A.HOST_NAME             ,
    A.CLUSTER_NAME          ,
    B.OPER_TIMESTAMP        ,
    B.OPERATION_TYPE        ,
    B.OPER_HOST_NAME        ,
    B.ID_FILE_EVENT_RENAME  ,
    E.ID_JOB_EXECUTION      ,
    E.JOB_NAME              ,
    E.SYSTEM_ID             ,
    E.JES2_JOB_ID           ,
    decode (E.ID_JOB_EXECUTION, 0, null, E.ID_JOB_EXECUTION, E.JOB_TIMESTAMP_ID),
    E.JOB_ABEND_CODE        ,
    E.JOB_CONDITION_CODE    ,
    E.JOB_COMPLETION_CODE   ,
    F.STEP_NAME             ,
    B.PGM_NAME              ,
    F.STEP_ABEND_CODE       ,
    F.STEP_CONDITION_CODE   ,
    F.STEP_COMPLETION_CODE  ,
    B.OPEN_TYPE             ,
    B.OPEN_DISP             ,
    B.DD_NAME               ,
    B.MEMBER_NAME           ,
    B.FILE_ORG              ,
    B.FILE_RECFM            ,
    B.FILE_SIZE             ,
    decode (B.ID_FILE_TRANSFER, null, null, B.ID_FILE_TRANSFER, (select TRANSFER_ID      from SPFB_FILE_TRANSFERS where SPFB_FILE_TRANSFERS.ID_FILE_TRANSFER=B.ID_FILE_TRANSFER)),
    decode (B.ID_FILE_TRANSFER, null, null, B.ID_FILE_TRANSFER, (select FLOW_INSTANCE_ID from SPFB_FILE_TRANSFERS where SPFB_FILE_TRANSFERS.ID_FILE_TRANSFER=B.ID_FILE_TRANSFER)),
    B.PARENT_ID             ,
    B.PROCESS_ID            ,
    B.THREAD_ID             ,
    B.MSG_SEND_TIMESTAMP    ,
    B.MSG_RECEIVE_TIMESTAMP ,
    B.INSERT_TIMESTAMP      ,
    B.CORRELATION_TIMESTAMP ,
    C.ID_FILE_EVENTS_SET    ,
    C.ID_FILE_EVENT_BEGIN   ,
    C.ID_FILE_EVENT_END     ,
    D.ID_FILESET            ,
    D.FSEE_UNIQUE_ID        ,
    D.FILESET_STATUS        ,
    D.EXPORT_STATUS         ,
    D.USAGE_COUNT           ,
    ((select count(*) from SPFB_FILE_EVENTS_SETS where SPFB_FILE_EVENTS_SETS.ID_FILESET = D.ID_FILESET) -1)
    RENAME_COUNT
  FROM
    SPFB_FILE_IDENTITIES        A,
    SPFB_FILE_EVENTS            B,
    SPFB_FILE_EVENTS_SETS       C,
    SPFB_FILE_INSTANCES         D,
    SPFB_JOB_EXECUTIONS         E,
    SPFB_JOB_EXECUTION_STEPS    F
  WHERE
    D.ID_FILESET              = C.ID_FILESET                and
    C.ID_FILE_EVENTS_SET      = B.ID_FILE_EVENTS_SET        and
    B.ID_FILE_IDENTITY        = A.ID_FILE_IDENTITY          and
    B.ID_JOB_EXECUTION_STEP   = F.ID_JOB_EXECUTION_STEP     and
    F.ID_JOB_EXECUTION        = E.ID_JOB_EXECUTION
;

-- Utility procedure to clean FSEE data
CREATE OR REPLACE PROCEDURE FSEE_CLEAN_ALL_DATA
  BEGIN
    DELETE FROM SPFB_FILE_EVENTS      ;
    COMMIT;
    DELETE FROM SPFB_FILE_TRANSFERS   ;
    COMMIT;
    DELETE FROM SPFB_FILE_EVENTS_SETS ;
    COMMIT;
    DELETE FROM SPFB_FILE_INSTANCES   ;
    COMMIT;
--  Following rows can't be deleted when Application Server is running (because are cached to support concurrent threads)
--    DELETE FROM SPFB_FILE_IDENTITIES  ;
--    COMMIT;
    DELETE FROM SPFB_JOB_EXECUTION_STEPS  WHERE ID_JOB_EXECUTION > 0;
    COMMIT;
    DELETE FROM SPFB_JOB_EXECUTIONS       WHERE ID_JOB_EXECUTION > 0;
    COMMIT;
  END;
/

---------------------------
-- SPAZIO 2 --
---------------------------

CREATE TABLE SPFB_SP2_FILE_SYS_MD (
	ID_ROW BIGINT NOT NULL,
	ID_FILESET BIGINT NOT NULL,
	ID_FILE BIGINT,
	NODE_NAME               VARCHAR(50),
    	QUEUE_MANAGER_NAME      VARCHAR(50),
    	QUEUE_NAME              VARCHAR(50),
    	ADDRESS_TYPE            INTEGER,
    	INTERNAL_NUMBER         VARCHAR(18),
    	MESSAGE_FILE_ID         VARCHAR(50),
    	CORRELATION_ID          VARCHAR(50),
    	SENDER                  VARCHAR(10),
    	USER_CLASS              VARCHAR(6),
    	DESTINATION_FILENAME    VARCHAR(258),
    	DESCRIPTION             VARCHAR(66),
    	START_PUT_DATE          TIMESTAMP,
    	EXPIRY_DATE             TIMESTAMP,
    	DESTINATION_PATHNAME    VARCHAR(258),
    	ORIGINAL_FILENAME       VARCHAR(258),
    	CODEPAGE                INTEGER,
    	EOR_EOF                 INTEGER,
    	PRIORITY                INTEGER,
    	FILE_LENGTH             BIGINT,
    	USER_ID                 VARCHAR(18),
    	SESSION_ID              VARCHAR(10),
    	FIRST_READ_DATE         TIMESTAMP,
    	LAST_READ_DATE          TIMESTAMP,
    	ARRIVAL_DATE            TIMESTAMP,
    	BINARY_FILE             INTEGER,
    	Z_COMPRESS              INTEGER,
    	DSTK                    INTEGER,
    	LOCALLY_EXTERNAL        INTEGER,
    	DESTINATION_EXTERNAL    INTEGER,
    	ORIGIN_QUEUE_MANAGER    VARCHAR(50),
    	ORIGIN_QUEUE            VARCHAR(50)
)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_SP2_FILE_SYS_MD ADD CONSTRAINT SPFB_SP2_FILE_SYS_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_SP2_FILE_SYS_MD ADD CONSTRAINT SPFB_SP2_FILE_SYS_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_SP2_FILE_MD_IX1 ON SPFB_SP2_FILE_SYS_MD (ID_FILESET, ID_FILE ASC);
CREATE SEQUENCE FBSP2_FILE_SYS_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

CREATE TABLE SPFB_SP2_SEL_SYS_MD (
		ID_ROW      BIGINT NOT NULL,
		ID_FILESET  BIGINT NOT NULL,
		ID_FILE     BIGINT,
-- VALUE 'S' or 'U'
		AREA_TYPE   VARCHAR(4),
		SEL_CODE    VARCHAR(50),
-- VALUE 'B', 'C', 'N', or 'P'
		SEL_TYPE    VARCHAR(4),
		SEL_LENGTH  VARCHAR(10),
		SEL_NAME    VARCHAR(50),
		SEL_VALUE   CLOB(64000)
	) IN "FB_TS_METADATA" ;
ALTER TABLE SPFB_SP2_SEL_SYS_MD ADD CONSTRAINT SPFB_SP2_SEL_SYS_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_SP2_SEL_SYS_MD ADD CONSTRAINT SPFB_SP2_SEL_SYS_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_SP2_SEL_MD_IX1 ON SPFB_SP2_SEL_SYS_MD (ID_FILESET, ID_FILE ASC);
CREATE SEQUENCE FBSP2_SEL_SYS_MD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

---------------------------
-- SPAZIO E-MAIL --
---------------------------

	CREATE TABLE SPFB_MAILOFF (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		AH_TO VARCHAR(4000),
		AH_CC VARCHAR(256),
		AH_BCC VARCHAR(256),
		AH_OTP VARCHAR(128),
		AH_FROM VARCHAR(128),
		AH_DATE VARCHAR(128),
		AH_SUBJECT VARCHAR(256),
		AH_BODY VARCHAR(4000),
		AH_BODY_BLOB BLOB(128000)
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_MAILOFF ADD CONSTRAINT SPFB_MAILOFF_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_MAILOFF ADD CONSTRAINT SPFB_MAILOFF_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_MAILOFF_IX1 ON SPFB_MAILOFF (ID_FILESET, ID_FILE ASC);
CREATE INDEX SPFB_MAILOFF_IX2 ON SPFB_MAILOFF (AH_OTP ASC);
CREATE SEQUENCE MAIL_OFF_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

---------------------------
-- PRIMEUR DROP FILE --
---------------------------

	CREATE TABLE SPFB_DROP_FILE_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		TRANSFER_ID VARCHAR(256),
		TRANSFER_STATUS INTEGER,
		PUBLIC_SHARE INTEGER,
		FB_TIMESTAMP TIMESTAMP,
		END_DATE TIMESTAMP,
		RETURN_RECIPT INTEGER,
		DELETE_AFTER_ALL_DOWNLOAD INTEGER,
		SENDER_USER VARCHAR(256),
		SENDER_EMAIL VARCHAR(256),
		SENDER_SUBJECT VARCHAR(512),
		SENDER_MESSAGE VARCHAR(4000)
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_DROP_FILE_MD ADD CONSTRAINT SPFB_DROP_FILE_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_DROP_FILE_MD ADD CONSTRAINT SPFB_DROP_FILE_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_DROP_FILE_MD_IX1 ON SPFB_DROP_FILE_MD (ID_FILESET, ID_FILE ASC);
CREATE UNIQUE INDEX SPFB_DROP_FILE_MD_IX2 ON SPFB_DROP_FILE_MD (TRANSFER_ID ASC);
CREATE INDEX SPFB_DROP_FILE_MD_IX3 ON SPFB_DROP_FILE_MD (END_DATE ASC);
CREATE SEQUENCE SPFB_DROP_FILE_MD_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPFB_DROP_FILE_RECIPIENTS_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		RECIPIENT_USER VARCHAR(256),
		RECIPIENT_EMAIL VARCHAR(256),
		RECIPIENT_QUEUE VARCHAR(256),
		EMAIL_SEND_TS TIMESTAMP
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_DROP_FILE_RECIPIENTS_MD ADD CONSTRAINT SPFB_DROP_FILE_RECIPIENTS_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_DROP_FILE_RECIPIENTS_MD ADD CONSTRAINT SPFB_DROP_FILE_RECIPIENTS_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_DROP_FILE_RECIPIENTS_MD_IX1 ON SPFB_DROP_FILE_RECIPIENTS_MD (ID_FILESET, ID_FILE ASC); 
CREATE INDEX SPFB_DROP_FILE_RECIPIENTS_MD_IX2 ON SPFB_DROP_FILE_RECIPIENTS_MD (RECIPIENT_EMAIL ASC); 
CREATE SEQUENCE SPFB_DROP_FILE_RECIPIENTS_MD_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPFB_DROP_FILE_FILES_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		RECIPIENTS_EMAIL VARCHAR(256),
		QMANAGER VARCHAR(256),
		QUEUE VARCHAR(256),
		CORRELATION_ID VARCHAR(256),
		FILE_NAME VARCHAR(256),
		FILE_URL VARCHAR(2048),
		FILE_SIZE BIGINT,
		FILE_END_DATE TIMESTAMP
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_DROP_FILE_FILES_MD ADD CONSTRAINT SPFB_DROP_FILE_FILES_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_DROP_FILE_FILES_MD ADD CONSTRAINT SPFB_DROP_FILE_FILES_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_DROP_FILE_FILES_MD_IX1 ON SPFB_DROP_FILE_FILES_MD (ID_FILESET, ID_FILE ASC); 
CREATE INDEX SPFB_DROP_FILE_FILES_MD_IX2 ON SPFB_DROP_FILE_FILES_MD (RECIPIENTS_EMAIL ASC); 
CREATE INDEX SPFB_DROP_FILE_FILES_MD_IX3 ON SPFB_DROP_FILE_FILES_MD (CORRELATION_ID ASC); 
CREATE SEQUENCE SPFB_DROP_FILE_FILES_MD_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPFB_DROP_FILE_DOWNLOAD_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		RECIPIENTS_EMAIL VARCHAR(256),
		DOWNLOAD_TS TIMESTAMP
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_DROP_FILE_DOWNLOAD_MD ADD CONSTRAINT SPFB_DROP_FILE_DOWNLOAD_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_DROP_FILE_DOWNLOAD_MD ADD CONSTRAINT SPFB_DROP_FILE_DOWNLOAD_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_DROP_FILE_DOWNLOAD_MD_IX1 ON SPFB_DROP_FILE_DOWNLOAD_MD (ID_FILESET, ID_FILE ASC); 
CREATE INDEX SPFB_DROP_FILE_DOWNLOAD_MD_IX2 ON SPFB_DROP_FILE_DOWNLOAD_MD (RECIPIENTS_EMAIL ASC); 
CREATE SEQUENCE SPFB_DROP_FILE_DOWNLOAD_MD_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPFB_DROP_FILE_USERS_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		USER_NAME VARCHAR(256),
		FIRST_NAME VARCHAR(256),
		LAST_NAME VARCHAR(256),
		COMPANY VARCHAR(256),
		USER_EMAIL VARCHAR(256)
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_DROP_FILE_USERS_MD ADD CONSTRAINT SPFB_DROP_FILE_USERS_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_DROP_FILE_USERS_MD ADD CONSTRAINT SPFB_DROP_FILE_USERS_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_DROP_FILE_USERS_MD_IX1 ON SPFB_DROP_FILE_USERS_MD (ID_FILESET, ID_FILE ASC); 
CREATE INDEX SPFB_DROP_FILE_USERS_MD_IX2 ON SPFB_DROP_FILE_USERS_MD (USER_NAME, ID_FILE ASC); 
CREATE SEQUENCE SPFB_DROP_FILE_USERS_MD_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

	CREATE TABLE SPFB_DROP_FILE_USER_CONFIG_MD (
		ID_ROW BIGINT NOT NULL,
		ID_FILESET BIGINT NOT NULL,
		ID_FILE BIGINT,
		CONFIG_PARAM VARCHAR(256),
		CONFIG_VALUE VARCHAR(256)
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_DROP_FILE_USER_CONFIG_MD ADD CONSTRAINT SPFB_DROP_FILE_USER_CONFIG_MD_PK PRIMARY KEY (ID_ROW);
ALTER TABLE SPFB_DROP_FILE_USER_CONFIG_MD ADD CONSTRAINT SPFB_DROP_FILE_USER_CONFIG_MD_FK1 FOREIGN KEY (ID_FILESET) REFERENCES SPFB_FILESET (ID_FILESET) ON DELETE CASCADE;
CREATE INDEX SPFB_DROP_FILE_USER_CONFIG_MD_IX1 ON SPFB_DROP_FILE_USER_CONFIG_MD (ID_FILESET, ID_FILE ASC); 
CREATE SEQUENCE SPFB_DROP_FILE_USER_CONFIG_MD_SEQ AS INTEGER START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;

---------------------------
-- FILEBOX VIEW --
---------------------------

CREATE VIEW FSEE_MON_FILE_VIEW ("FILESET", "FILESET_STATUS", "EXPORT_STATUS", "UNIQUE_ID", "HOST", "FROM_FILE", "USAGE", "OPERATION", "OPER_TIMESTAMP", "FB_TIMESTAMP", "SYSTEM_ID", "JES2_JOB_ID", "JOB_TIMESTAMP_ID", "JOB_NAME", "STEP_NAME", "PGM_NAME", "USER_ID", "OPEN_TYPE", "OPEN_DISP", "DD_NAME", "MEMBER_NAME", "FILE_ORG", "FILE_RECFM", "NEW_FILESET_ID", "NEW_FILE_ID", "FILE_SIZE", "OLD_FILE_NAME", "FLOW_INSTANCE_ID", "TO_FILESET", "TO_FILESET_STATUS", "TO_UNIQUE_ID", "TO_HOST", "TO_FILE") AS 
SELECT a.id_fileset "FILESET", a.fileset_status "FILESET_STATUS", a.export_status "EXPORT_STATUS", a.fsee_unique_id  "UNIQUE_ID", a.host_name  "HOST", a.file_name  "FROM_FILE", a.usage_count "USAGE", b.operation,b.oper_timestamp, b.fb_timestamp,b.system_id,b.jes2_job_id,b.job_timestamp_id,b.job_name,b.step_name,b.pgm_name,b.user_id,b.open_type,b.open_disp,b.dd_name,b.member_name,b.file_org,b.file_recfm,b.new_fileset_id,b.new_file_id,b.file_size, b.old_file_name, b.flow_instance_id, c.id_fileset "TO_FILESET", c.fileset_status  "TO_FILESET_STATUS", c.fsee_unique_id  "TO_UNIQUE_ID", c.host_name  "TO_HOST", c.file_name  "TO_FILE" FROM spfb_fileset_mon_md a LEFT JOIN spfb_fileset_log_md B ON a.id_fileset = b.id_fileset LEFT JOIN spfb_fileset_mon_md c ON b.new_fileset_id = c.id_fileset;

CREATE VIEW FSEE_FILE_MONITOR_VIEW ("UNIQUE_ID", "STATUS", "HOST", "FROM_FILE", "USAGE", "OPERATION", "OPER_TIMESTAMP", "PGM_NAME", "JOB_NAME", "JES2_JOB_ID", "OLD_FILE_NAME", "FLOW_INSTANCE_ID", "TO_HOST", "TO_FILE") AS 
SELECT unique_id, DECODE(fileset_status, 1, 'Exist', 2, 'Removed', 3, 'Wait Create', 4, 'Wait Acquire', 5, 'Wait Dispatch') "STATUS", host, from_file, usage, DECODE(operation, 1, 'Create', 11, 'Create', 2, 'Open', 12, 'Open', 3, 'Close', 13, 'Close', 4, 'Delete', 14, 'Delete', 5, 'Rename', 15, 'Rename', 6, 'Tranfer to', 61, 'Transfer from', 8, 'Acquired') "OPERATION", oper_timestamp, pgm_name, job_name, jes2_job_id, old_file_name, flow_instance_id, to_host, to_file FROM fsee_mon_file_view WHERE OPERATION <> 61;

CREATE VIEW FSEE_FILE_MONITOR_VIEW_EXP ("UNIQUE_ID", "STATUS", "EXPORT_STATUS", "HOST", "FROM_FILE", "USAGE", "OPERATION", "OPER_TIMESTAMP", "PGM_NAME", "JOB_NAME", "JES2_JOB_ID", "OLD_FILE_NAME", "FLOW_INSTANCE_ID", "TO_HOST", "TO_FILE") AS 
SELECT unique_id, DECODE(fileset_status, 1, 'Exist', 2, 'Removed', 3, 'Wait Create', 4, 'Wait Acquire', 5, 'Wait Dispatch') "STATUS", DECODE(export_status, 1, 'Ready', 2, 'Wait') "EXPORT_STATUS", host, from_file, usage,  DECODE(operation, 1, 'Create', 11, 'Create', 2, 'Open', 12, 'Open', 3, 'Close', 13, 'Close', 4, 'Delete', 14, 'Delete', 5, 'Rename', 15, 'Rename', 6, 'Tranfer to', 61, 'Transfer from', 8, 'Acquired') "OPERATION", oper_timestamp, pgm_name, job_name, jes2_job_id, old_file_name, flow_instance_id, to_host, to_file FROM fsee_mon_file_view WHERE OPERATION <> 61;

CREATE VIEW FSEE_MON_FILE_RENAME_VIEW ("ID_ROW_MON", "ID_ROW_LOG", "ID_FILESET", "ID_FILE", "FILESET_STATUS", "EXPORT_STATUS", "FSEE_UNIQUE_ID", "FILE_NAME", "HOST_NAME", "PLATFORM", "USAGE_COUNT", "CREATION_TS", "LAST_OPER_TS", "DELETE_TS", "OLD_FILE_NAME", "OLD_FILE_IDENTITY") AS
SELECT a."ID_ROW", b."ID_ROW", a."ID_FILESET", a."ID_FILE", a."FILESET_STATUS", a."EXPORT_STATUS", a."FSEE_UNIQUE_ID", a."FILE_NAME", a."HOST_NAME", a."PLATFORM", a."USAGE_COUNT", a."CREATION_TS", a."LAST_OPER_TS", a."DELETE_TS", b.old_file_name, b.old_file_identity FROM spfb_fileset_mon_md a LEFT JOIN spfb_fileset_log_md B  ON a.id_fileset = b.id_fileset WHERE b.old_file_name IS NOT NULL;

CREATE VIEW FSEE_REP_FILE_VIEW ("ID_FILESET", "FILESET_STATUS", "USAGE", "UNIQUE_ID", "OPERATION") AS 
SELECT a.id_fileset "ID_FILESET", a.fileset_status "FILESET_STATUS", a.usage_count "USAGE", a.fsee_unique_id  "UNIQUE_ID", b.operation "OPERATION" FROM spfb_fileset_mon_md a LEFT JOIN spfb_fileset_log_md b ON a.id_fileset = b.id_fileset;

CREATE VIEW SPFB_DROP_FILE_TRANSFER_MD (
			"ID_FILESET", 
			"TRANSFER_ID", 
			"TRANSFER_STATUS",
			"PUBLIC_SHARE",
			"END_DATE",
			"SENDER_EMAIL",
			"RECIPIENT_EMAIL",
			"FILE_NAME",
			"FILE_URL",
			"FILE_SIZE",
			"FILE_END_DATE",
			"DAYS_LEFT") 
AS SELECT a.ID_FILESET "ID_FILESET", 
		  a.TRANSFER_ID "TRANSFER_ID", 
		  a.TRANSFER_STATUS "TRANSFER_STATUS", 
		  a.PUBLIC_SHARE "PUBLIC_SHARE", 
		  a.END_DATE  "END_DATE", 
		  a.SENDER_EMAIL "SENDER_EMAIL",
		  b.RECIPIENTS_EMAIL "RECIPIENTS_EMAIL",
		  b.FILE_NAME "FILE_NAME",
		  b.FILE_URL "FILE_URL",
		  b.FILE_SIZE "FILE_SIZE",
		  b.FILE_END_DATE "FILE_END_DATE",
		  timestampdiff(16, b.FILE_END_DATE - current timestamp) "DAYS_LEFT"
FROM SPFB_DROP_FILE_MD a LEFT JOIN SPFB_DROP_FILE_FILES_MD b ON a.ID_FILESET = b.ID_FILESET;

COMMIT;

INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (1, 'FILEBOX', 'Filebox Module');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (2, 'ADHOC', 'Ad Hoc File Transfer');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (3, 'SPRING_BATCH', 'Spring Batch Module');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (4, 'FSEE', 'File Services End to End');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (5, 'A3SERVER', 'Filebox Security Module');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (6, 'DROP_FILE', 'Drop File Module');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (7, 'EVENT_CONFIG', 'Filebox Event Notification Engine Module');
INSERT INTO SPMFTS_CFG_MODULES(ID_MODULE, CODE, DESCRIPTION) VALUES (8, 'SPAZIO2_SYNC', 'Spazio2 Syncronization Engine Module');

---------------------------
-- FILEBOX CONFIGURATION --
---------------------------
INSERT INTO SPMFTS_CFG_SECTION_TYPE (ID_SECTION_TYPE, ID_MODULE, SECTION_CODE, DESCRIPTION, SECTION_HELP, DEFAULT_SECTION_NAME, REQUIRED, MULTIPLE) VALUES (1, 1, 'COMMON', 'Collect Properties outside any Section', '', 'COMMON', 1, 0);

INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES (1, 1, 'cleanSessionsTimerInterval', 0,  'cleanSessionsTimerInterval', '', '300000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'cleanSessionsTimerOn', 0,  'cleanSessionsTimerOn', '', '0', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'manageRequestsTimerInterval', 0,  'manageRequestsTimerInterval', '', '300000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'manageRequestsTimerOn', 0,  'manageRequestsTimerOn', '', '0', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'dataBaseVersion', 0,  'dataBaseVersion', '', '', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'enableFilesetWithoutFiles', 0,  'enableFilesetWithoutFiles', '', '1', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'insertFilesetDefaultTimeout', 0,  'insertFilesetDefaultTimeout', '', '120000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'insertFilesetDefaultTimeout', 0,  'insertFilesetDefaultTimeout', '', '300000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'cleanInsertFilesetDLQOn', 0,  'cleanInsertFilesetDLQOn', '', '0', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'cleanExpiredFilesetTimerInterval', 0,  'cleanExpiredFilesetTimerInterval', '', '3600000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'cleanExpiredFilesetOn', 0,  'cleanExpiredFilesetOn', '', '1', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'securityEnabled', 0,  'securityEnabled', '', '0', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'traceLevel', 0,  'traceLevel', '', '0', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'processFseeWaitingMsgTimerInterval', 0,  'processFseeWaitingMsgTimerInterval', '', '120000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'processFseeWaitingMsgTimerOn', 0,  'processFseeWaitingMsgTimerOn', '', '1', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'updateConfigFromFileTimerInterval', 0,  'updateConfigFromFileTimerInterval', '', '120000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'updateConfigFromFileTimerOn', 0,  'updateConfigFromFileTimerOn', '', '1', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'dropFileRemindersTimerInterval', 0,  'dropFileRemindersTimerInterval', '', '84000000', 0, '');
INSERT INTO SPMFTS_CFG_SEC_STRUCT (ID_STRUCT, ID_SECTION, PROP_NAME, PROP_TYPE, DESCRIPTION, PROP_HELP, DEFAULT_VALUE, MAX_LENGTH, CHAR_SET )
                           VALUES ((SELECT MAX(ID_STRUCT) FROM SPMFTS_CFG_SEC_STRUCT) + 1, 1, 'dropfileRemindersTimerOn', 0,  'dropfileRemindersTimerOn', '', '1', 0, '');

--------------------------
-- COMMON CONFIGURATION --
--------------------------
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES (1, 1, 1, 'COMMON', 'cleanSessionsTimerInterval', '300000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'cleanSessionsTimerOn', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'manageRequestsTimerInterval', '300000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'manageRequestsTimerOn', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'dataBaseVersion', '1.19');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'enableFilesetWithoutFiles', '1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'insertFilesetDefaultTimeout', '120000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'cleanInsertFilesetDLQTimerInterval', '300000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'cleanInsertFilesetDLQOn', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'cleanExpiredFilesetTimerInterval', '3600000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'cleanExpiredFilesetOn', '1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'securityEnabled', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'traceLevel', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'processFseeWaitingMsgTimerInterval', '60000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'processFseeWaitingMsgTimerOn', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'updateConfigFromFileTimerInterval', '120000');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'updateConfigFromFileTimerOn', '1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'sendHeartBeatEnabled', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'sendHeartBeatTimerOn', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW, ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
		          VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON', 'sendHeartBeatTimerInterval', '0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
				  VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON','sendHeartBeatHostName','localhost');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
				  VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON','sendHeartBeatPort','61616');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
				  VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON','sendHeartBeatUser',' ');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
				  VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON','sendHeartBeatPassword',' ');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
				  VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON','sendHeartBeatQueueName','Filebox.HB');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
				  VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1, 1, 1, 'COMMON','sendHeartBeatDestinationTypeTopic','0');
		          
-------------------------
-- ADHOC CONFIGURATION --
-------------------------
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'COMMON','enableSendMessagesToB2B','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'COMMON','configForB2BCommunication','AMQB2BCommunicator');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'AMQB2BCommunicator','hostName','localhost');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'AMQB2BCommunicator','port','7222');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'AMQB2BCommunicator','user',' ');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'AMQB2BCommunicator','sendQueueName','FSEE.BAM');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,2,1,'AMQB2BCommunicator','destinationTypeTopic','0');
		          

------------------------
-- FSEE CONFIGURATION --
------------------------
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','enableSendMessagesToBam','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','configForBamCommunication','AMQBamCommunicator');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','enableSendMessagesToCutoff','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','configForCutoffCommunication','AMQCutoffComminicator');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','enableUsageConuntFromConfig','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','checkEventAlreadyExist','1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','runThreadsByFile','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'COMMON','eventsQueuesInMemory','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE)
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'spsa','platform','unix');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'spsa','AppType','2');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'spsa','openUsageCount','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'filetacq','platform','unix');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'filetacq','AppType','2');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'filetacq','openUsageCount','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'filetdsp','platform','unix');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'filetdsp','AppType','1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'filetdsp','openUsageCount','1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'SDFUROU','platform','MVS');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'SDFUROU','AppType','1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'SDFUROU','openUsageCount','1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'SDFUACQ','platform','MVS');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'SDFUACQ','AppType','2');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'SDFUACQ','openUsageCount','1');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'WMQBamCommunicator','hostName','192.168.7.186');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'WMQBamCommunicator','channel','SYSTEM.DEF.SVRCONN');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'WMQBamCommunicator','port','1415');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'WMQBamCommunicator','queueManagerName','QM.DOBLONIG');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'WMQBamCommunicator','sendQueueName','FILEBOX');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQBamCommunicator','hostName','localhost');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQBamCommunicator','port','61616');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQBamCommunicator','queueManagerName',' ');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQBamCommunicator','sendQueueName','FSEE.BAM');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQBamCommunicator','destinationTypeTopic','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'TIBCOBamCommunicator','hostName','localhost');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'TIBCOBamCommunicator','port','7222');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'TIBCOBamCommunicator','user',' ');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'TIBCOBamCommunicator','sendQueueName','FSEE.BAM');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'TIBCOBamCommunicator','destinationTypeTopic','0');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQCutoffComminicator','hostName','localhost');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQCutoffComminicator','port','61616');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQCutoffComminicator','queueManagerName',' ');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQCutoffComminicator','sendQueueName','cutoffNotifyEvents');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,4,1,'AMQCutoffComminicator','destinationTypeTopic','0');
	
-------------------------
-- A3SERVER CONFIGURATION --
-------------------------
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,5,1,'license','file','xxxxxx');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,5,1,'license','pwd','xxxxxx');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,5,1,'connection','url','xxxxxx');

------------------------
-- DROP FILE CONFIGURATION --
------------------------
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,6,1,'MailServer','hostName','xxxxxx');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,6,1,'MailServer','user','xxxxxx');
INSERT INTO SPMFTS_CONFIGURATION (ID_ROW,ID_MODULE, ID_SECTION, SECTION_NAME, PROPERTY_NAME, PROPERTY_VALUE) 
	VALUES ((SELECT MAX(ID_ROW) FROM SPMFTS_CONFIGURATION) + 1,6,1,'MailServer','password','xxxxxx');

COMMIT;

INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (1, 0, 'SPFB_FILESET_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (2, 0, 'SPFB_METADATA_REC_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (3, 0, 'SPFB_FILE_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (4, 0, 'SPRST_SESSION_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (5, 0, 'SPRST_REQUEST_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (6, 0, 'SPFB_METADATA_CLASS_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (7, 0, 'SPFB_METADATA_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (8, 5, 'SPFB_USER_CLASS_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (9, 5, 'SPFB_STORAGE_CLASS_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (10, 5, 'SPFB_STORAGE_VOLUME_COUNTER');
INSERT INTO SPMFTS_COUNTERS(ID_COUNTER, LAST_VALUE, DESCRIPTION) VALUES (11, 0, 'SPFB_FSEE_COUNTER');

COMMIT;

INSERT INTO SPFB_FILE_TYPES(ID_FILETYPE, FILETYPECODE, DESCRIPTION) VALUES (1, 'SEQUENTIAL', 'Generic sequential File');

COMMIT;

INSERT INTO SPFB_STORAGE_CLASS(ID_STORAGE_CLASS, STORAGE_CLASS_CODE, DESCRIPTION) VALUES (1, 'DEFAULT', 'Default Storage Class');
INSERT INTO SPFB_STORAGE_CLASS(ID_STORAGE_CLASS, STORAGE_CLASS_CODE, DESCRIPTION) VALUES (2, 'MBOX1', 'Storage Class in Mailbox');
INSERT INTO SPFB_STORAGE_CLASS(ID_STORAGE_CLASS, STORAGE_CLASS_CODE, DESCRIPTION) VALUES (3, 'ADHOC', 'Storage Class for Ad Hoc File Transfer');
INSERT INTO SPFB_STORAGE_CLASS(ID_STORAGE_CLASS, STORAGE_CLASS_CODE, DESCRIPTION) VALUES (4, 'SP2FB', 'Storage Class for Spazio2 Syncronize');
INSERT INTO SPFB_STORAGE_CLASS(ID_STORAGE_CLASS, STORAGE_CLASS_CODE, DESCRIPTION) VALUES (5, 'FSEE', 'Storage Class for FSEE');
INSERT INTO SPFB_STORAGE_CLASS(ID_STORAGE_CLASS, STORAGE_CLASS_CODE, DESCRIPTION) VALUES (6, 'DROP_FILE', 'Storage Class for DROP_FILE');
                                                                                               
COMMIT; 

INSERT INTO SPFB_USER_CLASSES(ID_USER_CLASS, USER_CLASS_CODE, DESCRIPTION, CLASS_TYPE, ID_STORAGE_CLASS, EXPIRY_AFTER_PUT, EXPIRY_AFTER_READ, DELETE_MODE, ARCHIVING_OPT, CREATION_DATE, UPDATE_DATE) VALUES (1, 'DEFAULT', 'Default User Class', 0, 1, 0, 0, 0, 0, null, null);
INSERT INTO SPFB_USER_CLASSES(ID_USER_CLASS, USER_CLASS_CODE, DESCRIPTION, CLASS_TYPE, ID_STORAGE_CLASS, EXPIRY_AFTER_PUT, EXPIRY_AFTER_READ, DELETE_MODE, ARCHIVING_OPT, CREATION_DATE, UPDATE_DATE) VALUES (2, 'MBOX1', 'User class with files in Mailbox', 0, 2, 0, 0, 0, 0, null, null);
INSERT INTO SPFB_USER_CLASSES(ID_USER_CLASS, USER_CLASS_CODE, DESCRIPTION, CLASS_TYPE, ID_STORAGE_CLASS, EXPIRY_AFTER_PUT, EXPIRY_AFTER_READ, DELETE_MODE, ARCHIVING_OPT, CREATION_DATE, UPDATE_DATE) VALUES (3, 'ADHOC', 'User class with files in remote storage', 0, 3, 0, 0, 0, 0, null, null);
INSERT INTO SPFB_USER_CLASSES(ID_USER_CLASS, USER_CLASS_CODE, DESCRIPTION, CLASS_TYPE, ID_STORAGE_CLASS, EXPIRY_AFTER_PUT, EXPIRY_AFTER_READ, DELETE_MODE, ARCHIVING_OPT, CREATION_DATE, UPDATE_DATE) VALUES (4, 'SP2FB', 'User class with files in remote storage', 0, 4, 0, 0, 0, 0, null, null);
INSERT INTO SPFB_USER_CLASSES(ID_USER_CLASS, USER_CLASS_CODE, DESCRIPTION, CLASS_TYPE, ID_STORAGE_CLASS, EXPIRY_AFTER_PUT, EXPIRY_AFTER_READ, DELETE_MODE, ARCHIVING_OPT, CREATION_DATE, UPDATE_DATE) VALUES (5, 'FSEE', 'User class with files in remote storage', 0, 5, 0, 0, 0, 0, null, null);
INSERT INTO SPFB_USER_CLASSES(ID_USER_CLASS, USER_CLASS_CODE, DESCRIPTION, CLASS_TYPE, ID_STORAGE_CLASS, EXPIRY_AFTER_PUT, EXPIRY_AFTER_READ, DELETE_MODE, ARCHIVING_OPT, CREATION_DATE, UPDATE_DATE) VALUES (6, 'DROP_FILE', 'User class with files in remote storage', 0, 5, 0, 0, 0, 0, null, null);
                                                                                               
COMMIT;                                                                                        
                                                                                               
INSERT INTO SPFB_STORAGE_VOLS(ID_VOLUME, ID_VOLUME_TYPE, ID_STATE, VOLUME_CODE, DESCRIPTION, VOLUME_URL, VOLUME_FREE_LEVEL) VALUES (1, 1, 1, 'LINK', 'Generic Link Volume', null, 0);
INSERT INTO SPFB_STORAGE_VOLS(ID_VOLUME, ID_VOLUME_TYPE, ID_STATE, VOLUME_CODE, DESCRIPTION, VOLUME_URL, VOLUME_FREE_LEVEL) VALUES (2, 2, 1, 'VOL1', 'Volume in Mailbox', '/TEMP/', 0);
INSERT INTO SPFB_STORAGE_VOLS(ID_VOLUME, ID_VOLUME_TYPE, ID_STATE, VOLUME_CODE, DESCRIPTION, VOLUME_URL, VOLUME_FREE_LEVEL) VALUES (3, 5, 1, 'ADHOC', 'Generic Remote Link Volume', null, 0);
INSERT INTO SPFB_STORAGE_VOLS(ID_VOLUME, ID_VOLUME_TYPE, ID_STATE, VOLUME_CODE, DESCRIPTION, VOLUME_URL, VOLUME_FREE_LEVEL) VALUES (4, 5, 1, 'SP2FB', 'Generic Remote Link Volume', null, 0);
INSERT INTO SPFB_STORAGE_VOLS(ID_VOLUME, ID_VOLUME_TYPE, ID_STATE, VOLUME_CODE, DESCRIPTION, VOLUME_URL, VOLUME_FREE_LEVEL) VALUES (5, 5, 1, 'FSEE', 'Generic Remote Link Volume', null, 0);
INSERT INTO SPFB_STORAGE_VOLS(ID_VOLUME, ID_VOLUME_TYPE, ID_STATE, VOLUME_CODE, DESCRIPTION, VOLUME_URL, VOLUME_FREE_LEVEL) VALUES (6, 5, 1, 'DROP_FILE', 'Generic Remote Link Volume', null, 0);
                                                                                               
COMMIT;                                                                                        
                                                                                               
INSERT INTO SPFB_STO_CLASS_VOL(ID_STORAGE_CLASS, ID_VOLUME) VALUES (1, 1);                     
INSERT INTO SPFB_STO_CLASS_VOL(ID_STORAGE_CLASS, ID_VOLUME) VALUES (2, 2);                     
INSERT INTO SPFB_STO_CLASS_VOL(ID_STORAGE_CLASS, ID_VOLUME) VALUES (3, 3); 
INSERT INTO SPFB_STO_CLASS_VOL(ID_STORAGE_CLASS, ID_VOLUME) VALUES (4, 4);   
INSERT INTO SPFB_STO_CLASS_VOL(ID_STORAGE_CLASS, ID_VOLUME) VALUES (5, 5);   
INSERT INTO SPFB_STO_CLASS_VOL(ID_STORAGE_CLASS, ID_VOLUME) VALUES (6, 6);   
                   
                                                                                               
COMMIT;                                                                                        

INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (1, 'VARCHAR', 'DB2', 'VARCHAR', 'Varchar');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (2, 'INTEGER', 'DB2', 'INTEGER', 'Integer Field');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (3, 'CHAR', 'DB2', 'CHAR', 'Character');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (4, 'BLOB', 'DB2', 'BLOB', null);
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (5, 'BINARY', 'DB2', 'VARBINARY', null);
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (6, 'DATE', 'DB2', 'TIMESTAMP', 'Date Time Field stored as Sql Timestamp');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (7, 'LONG', 'DB2', 'BIGINT', null);
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (8, 'SHORT', 'DB2', 'SMALLINT', '');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (9, 'NUMERIC', 'DB2', 'DECIMAL', 'Numeric Field');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (10, 'TIMESTAMP', 'DB2', 'TIMESTAMP', 'Full Sql Timestamp');
INSERT INTO SPFB_META_TYPE(ID_METADATA_TYPE, TYPE_NAME, DBMS_NAME, DB_TYPE, DESCRIPTION) VALUES (11, 'CLOB', 'DB2', 'CLOB', 'Character Large OBject');

COMMIT;

----------------------------------------------------------------------------
-- TRACKING SERVER TABLES
----------------------------------------------------------------------------

	CREATE TABLE SPFB_TS_EVENT(
		ID_TS_EVENT BIGINT NOT NULL, --pk
		ID_OBJECT BIGINT NOT NULL,
		ID_SUBJECT BIGINT NOT NULL,
		ID_NODE BIGINT,
		ID_ACTION BIGINT,
		ID_COMPONENT BIGINT,
		OPER_TIMESTAMP TIMESTAMP,
		INSERT_TIMESTAMP TIMESTAMP 
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_EVENT ADD CONSTRAINT SPFB_TS_EVENT_PK PRIMARY KEY (ID_TS_EVENT);
CREATE INDEX IX_TS_EVENT_SUBJECT ON SPFB_TS_EVENT (ID_SUBJECT);
CREATE INDEX IX_TS_EVENT_OBJECT ON SPFB_TS_EVENT (ID_OBJECT);
	
	CREATE TABLE SPFB_TS_EVENT_RECORD(
		ID_TS_EVENT_RECORD BIGINT NOT NULL, --pk
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_CATEGORY BIGINT,
		ID_OUTCOME BIGINT,
		ID_OBJECT_URI BIGINT,
		ID_SUBJECT_URI BIGINT,
		ID_OUTCOME_URI BIGINT,
		ID_PREDECESSOR BIGINT,
		OBJECT_URI VARCHAR(1024),
		SUBJECT_URI VARCHAR(1024),
		OUTCOME_URI VARCHAR(1024),
		ID_PHASE BIGINT,
		EVENT_UUID VARCHAR(64),
		PROCESS_ID VARCHAR(64),
		OBJECT_DETAIL BLOB(262144),
		SUBJECT_DETAIL BLOB(262144),
		OUTCOME_DETAIL BLOB(262144),
		ACTION_DETAIL BLOB(262144),
		OBJECT_RESOURCE_ID VARCHAR(1024),
		SUBJECT_RESOURCE_ID VARCHAR(1024),
		OUTCOME_RESOURCE_ID VARCHAR(1024),
		INSERT_TIMESTAMP TIMESTAMP
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_EVENT_RECORD_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_EVENT_RECORD ADD CONSTRAINT SPFB_TS_EVENT_RECORD_PK PRIMARY KEY (ID_TS_EVENT_RECORD); 
CREATE INDEX IX_TS_EVENT_EVENT_RECORD ON SPFB_TS_EVENT_RECORD (ID_TS_EVENT);

	CREATE TABLE SPFB_TS_DATA_MANAGEMENT_EVENT(
		ID_TS_DM_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		ID_FILE_IDENTITY BIGINT,
		ID_FILE_RENAME BIGINT,
		ID_FILE_TRANSFER BIGINT,
		INSERT_TIMESTAMP TIMESTAMP
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_DATA_MANAGEMENT_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_DATA_MANAGEMENT_EVENT ADD CONSTRAINT SPFB_TS_DM_EVENT_PK PRIMARY KEY (ID_TS_DM_EVENT); 


	CREATE TABLE SPFB_TS_CONNECTION_EVENT(
		ID_TS_CONN_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		INSERT_TIMESTAMP TIMESTAMP
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_CONNECTION_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_CONNECTION_EVENT ADD CONSTRAINT SPFB_TS_CONN_EVENT_PK PRIMARY KEY (ID_TS_CONN_EVENT); 
	

	CREATE TABLE SPFB_TS_CONTROL_EVENT(
		ID_TS_CTRL_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		INSERT_TIMESTAMP TIMESTAMP 
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_CONTROL_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_CONTROL_EVENT ADD CONSTRAINT SPFB_TS_CTRL_EVENT_PK PRIMARY KEY (ID_TS_CTRL_EVENT); 


	CREATE TABLE SPFB_TS_PROCESS_EVENT(
		ID_TS_PROCESS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		INSERT_TIMESTAMP TIMESTAMP  
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_PROCESS_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_PROCESS_EVENT ADD CONSTRAINT SPFB_TS_PROCESS_EVENT_PK PRIMARY KEY (ID_TS_PROCESS_EVENT); 


	CREATE TABLE SPFB_TS_SECURITY_EVENT(
		ID_TS_SEC_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		INSERT_TIMESTAMP TIMESTAMP 
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_SECURITY_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_SECURITY_EVENT ADD CONSTRAINT SPFB_TS_SEC_EVENT_PK PRIMARY KEY (ID_TS_SEC_EVENT); 

	CREATE TABLE SPFB_TS_SPAZIO_MANAGEMENT_EVENT(
		ID_TS_SPMAN_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		INSERT_TIMESTAMP TIMESTAMP  
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_SPAZIO_MANAGEMENT_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_SPAZIO_MANAGEMENT_EVENT ADD CONSTRAINT SPFB_TS_SPMAN_EVENT_PK PRIMARY KEY (ID_TS_SPMAN_EVENT); 


	CREATE TABLE SPFB_TS_ERROR_EVENT(
		ID_TS_ERR_EVENT BIGINT NOT NULL,
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENT_RECORD BIGINT NOT NULL,
		INSERT_TIMESTAMP TIMESTAMP  
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_ERROR_EVENT_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 1000;
ALTER TABLE SPFB_TS_ERROR_EVENT ADD CONSTRAINT SPFB_TS_ERR_EVENT_PK PRIMARY KEY (ID_TS_ERR_EVENT); 

	CREATE TABLE SPFB_TS_EVENTS_SET(
		ID_TS_EVENTS_SET BIGINT NOT NULL, --pk
		ID_TS_FIRST_EVENT BIGINT NOT NULL,
		ID_TS_LAST_EVENT BIGINT NOT NULL,
		DESCRIPTION VARCHAR(64),
		INSERT_TIMESTAMP TIMESTAMP  
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_EVENTS_SET_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_TS_EVENTS_SET ADD CONSTRAINT SPFB_TS_EVENTS_SET_PK PRIMARY KEY (ID_TS_EVENTS_SET); 
	
	CREATE TABLE SPFB_TS_EVENT_ASSOCIATION(
		ID_TS_EVENT_ASSOCIATION BIGINT NOT NULL, --pk
		ID_TS_EVENT BIGINT NOT NULL,
		ID_TS_EVENTS_SET BIGINT NOT NULL,
		ID_EVENT_NEXT BIGINT,
		ID_EVENT_PREVIOUS BIGINT,
		INSERT_TIMESTAMP TIMESTAMP 
	)  IN "FB_TS_METADATA";
CREATE SEQUENCE SPFB_TS_EVENT_ASSOCIATION_SEQ AS BIGINT START WITH 1 INCREMENT BY 1 NO MAXVALUE NO CYCLE CACHE 20;
ALTER TABLE SPFB_TS_EVENT_ASSOCIATION ADD CONSTRAINT SPFB_TS_EVENT_ASSOCIATION_PK PRIMARY KEY (ID_TS_EVENT_ASSOCIATION); 

	CREATE TABLE SPFB_TS_EVENT_CATEGORY(
		ID_TS_EVENT_CATEGORY INTEGER NOT NULL, --pk
		DESCRIPTION VARCHAR(64),
		LAST_UPDATE TIMESTAMP 
	)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_TS_EVENT_CATEGORY ADD CONSTRAINT SPFB_TS_EVENT_CATEGORY_PK PRIMARY KEY (ID_TS_EVENT_CATEGORY); 

COMMIT;

----------------------------------------------------------------------------
-- TRACKING SERVER VIEWS --
----------------------------------------------------------------------------


CREATE VIEW SPFB_TS_CORE_EVENT_VIEW  
AS SELECT CORE.ID_TS_EVENT, ID_OBJECT, ID_SUBJECT, ID_OUTCOME, ID_NODE, ID_ACTION, ID_COMPONENT, OPER_TIMESTAMP,
	ID_TS_EVENT_RECORD, ID_OBJECT_URI, ID_SUBJECT_URI, ID_OUTCOME_URI, OBJECT_URI, SUBJECT_URI, OUTCOME_URI, ID_TS_EVENT_CATEGORY, EVENT_UUID, ID_PREDECESSOR, ID_PHASE, PROCESS_ID, OBJECT_DETAIL, SUBJECT_DETAIL, OUTCOME_DETAIL, ACTION_DETAIL, OBJECT_RESOURCE_ID, SUBJECT_RESOURCE_ID, OUTCOME_RESOURCE_ID
FROM SPFB_TS_EVENT CORE, SPFB_TS_EVENT_RECORD RECORD  
WHERE CORE.ID_TS_EVENT=RECORD.ID_TS_EVENT;  

CREATE VIEW SPFB_TS_DATA_MANAGEMENT_EVENT_VIEW
AS SELECT CORE.*, ID_FILE_IDENTITY, ID_FILE_RENAME, ID_FILE_TRANSFER
FROM SPFB_TS_CORE_EVENT_VIEW CORE, SPFB_TS_DATA_MANAGEMENT_EVENT DATA 
WHERE CORE.ID_TS_EVENT_RECORD = DATA.ID_TS_EVENT_RECORD;

COMMIT;


----------------------------------------------------------------------------
-- TRACKING SERVER URI AND SCHEMA LOOKUP TABLES --
-- THESE ARE FOR TEST AT THE MOMENT --
-- SCHEMA SHOULD BE CACHED --
----------------------------------------------------------------------------

CREATE TABLE SPFB_TS_SCHEMA(
	ID_TS_SCHEMA BIGINT NOT NULL
	GENERATED ALWAYS AS IDENTITY 
      	(START WITH 1 INCREMENT BY 1 MINVALUE 1 NO MAXVALUE NO CYCLE NO CACHE ORDER), --pk
	SCHEMA VARCHAR(64) NOT NULL,
	LAST_UPDATE TIMESTAMP
)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_TS_SCHEMA ADD CONSTRAINT SPFB_TS_SCHEMA_PK PRIMARY KEY (ID_TS_SCHEMA); 

CREATE TABLE SPFB_TS_URI(
	ID_TS_URI BIGINT NOT NULL
	GENERATED ALWAYS AS IDENTITY 
      	(START WITH 1 INCREMENT BY 1 MINVALUE 1 NO MAXVALUE NO CYCLE NO CACHE ORDER),
	ID_TS_SCHEMA BIGINT NOT NULL, --fk
	URI VARCHAR(1024) NOT NULL,
	LAST_UPDATE TIMESTAMP
)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_TS_URI ADD CONSTRAINT SPFB_TS_URI_PK PRIMARY KEY (ID_TS_URI); 

CREATE TABLE SPFB_TS_RESOURCE_ID(
	ID_TS_RESOURCE_ID BIGINT NOT NULL
	GENERATED ALWAYS AS IDENTITY 
      	(START WITH 1 INCREMENT BY 1 MINVALUE 1 NO MAXVALUE NO CYCLE NO CACHE ORDER),
	ID_TS_URI BIGINT NOT NULL, --fk
	URI_INSTANCE_KEY VARCHAR(1024),
	LAST_UPDATE TIMESTAMP
)  IN "FB_TS_METADATA";
ALTER TABLE SPFB_TS_RESOURCE_ID ADD CONSTRAINT SPFB_TS_RESOURCE_PK PRIMARY KEY (ID_TS_RESOURCE_ID); 
CREATE UNIQUE INDEX IX_SPFB_TS_RESOURCE_ID ON SPFB_TS_RESOURCE_ID (ID_TS_URI,URI_INSTANCE_KEY);

CREATE VIEW SPFB_TS_URI_VIEW  
AS SELECT U.ID_TS_URI,S.SCHEMA, U.URI
FROM SPFB_TS_SCHEMA S, SPFB_TS_URI U  
WHERE S.ID_TS_SCHEMA=U.ID_TS_SCHEMA; 

CREATE VIEW SPFB_TS_URI_INSTANCE_VIEW
AS SELECT  R.ID_TS_RESOURCE_ID, R.ID_TS_URI, UV.SCHEMA, UV.URI, R.URI_INSTANCE_KEY
FROM SPFB_TS_URI_VIEW UV, SPFB_TS_RESOURCE_ID R
WHERE UV.ID_TS_URI=R.ID_TS_URI;

CREATE VIEW SPFB_TS_FULL_URI_INSTANCE_VIEW (ID_TS_RESOURCE_ID, ID_TS_URI, FULL_URI, URI_INSTANCE_KEY) AS SELECT  R.ID_TS_RESOURCE_ID, R.ID_TS_URI, 
UV.SCHEMA||':://'||UV.URI, R.URI_INSTANCE_KEY FROM SPFB_TS_URI_VIEW UV, SPFB_TS_RESOURCE_ID R WHERE UV.ID_TS_URI=R.ID_TS_URI;

COMMIT;

INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengclus', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengprofile', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengpeer', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengsrv', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengpipe', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengjob', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spengcfgag', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'file', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'shfile', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'zfile', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'hdfs', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'spusr', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_SCHEMA VALUES (DEFAULT, 'prisip', CURRENT TIMESTAMP);


INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='spengsrv'),
	'CLUS01/global/FTP/server1/PEER01', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='spengpeer'),
	'CLUS01/PEER01', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='spengpipe'),
	'CLUS01/global/FTP/serverUpload/pipe1', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='file'),
	'directory_1/file1', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='spengjob'),
	'CLUS01/global/FTP/clientDownload/internal.pipe/SJ0001', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='spengjob'),
	'CLUS01/global/FTP/serverUpload/pipe1/PJ0002', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_URI VALUES (DEFAULT, 
	(SELECT ID_TS_SCHEMA FROM SPFB_TS_SCHEMA WHERE SCHEMA='prisip'),
	'AClhpZSOPeMgb4GOU5823j', CURRENT TIMESTAMP);


COMMIT;

----------------------------------------------------------------------------
-- TRACKING SERVER CONFIGURATION --
----------------------------------------------------------------------------
	
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (0, 'CONNECTION', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (1, 'CONTROL', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (2, 'DATA_MANAGEMENT', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (3, 'ERROR', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (4, 'PROCESS', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (5, 'SECURITY', CURRENT TIMESTAMP);
INSERT INTO SPFB_TS_EVENT_CATEGORY VALUES (6, 'SPAZIO_MANAGEMENT', CURRENT TIMESTAMP);

COMMIT;

----------------------------------------------------------------------------
-- END OF TRACKING SERVER SECTION --
----------------------------------------------------------------------------

----------------------------------------------------------------------------
-- STORED PROCEDURES --
----------------------------------------------------------------------------


-- DROP PROCEDURE INCREMENT_COUNTER (INTEGER, BIGINT);

CREATE PROCEDURE INCREMENT_COUNTER ( IN counterID INTEGER, OUT nextVal BIGINT )
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
BEGIN
	SELECT LAST_VALUE INTO nextVal FROM SPMFTS_COUNTERS WHERE ID_COUNTER = counterID;
		
	SET nextVal = nextVal + 1;
	
	UPDATE SPMFTS_COUNTERS SET LAST_VALUE = nextVal  WHERE ID_COUNTER = counterID;
END;
/

-- DROP PROCEDURE INSERT_CLASS_IN_DICT (BIGINT, VARCHAR(32), INTEGER, VARCHAR(256), VARCHAR(256));

CREATE PROCEDURE INSERT_CLASS_IN_DICT ( IN classId BIGINT, IN className VARCHAR(256), IN classType INTEGER, IN java_class VARCHAR(256), IN desc VARCHAR(256))
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
BEGIN
	INSERT INTO SPFB_META_CLASS(ID_METADATA_CLASS, CLASS_NAME, CLASS_TYPE, JAVA_CLASS, DESCRIPTION) VALUES (classId, className, classType, java_class, desc);	
END;
/

-- DROP PROCEDURE INSERT_METADATA_IN_DICT (BIGINT, INTEGER, VARCHAR(32), VARCHAR(128), INTEGER, INTEGER);

CREATE PROCEDURE INSERT_METADATA_IN_DICT ( IN classId BIGINT,
					   IN typeId INTEGER,
					   IN metadtaName VARCHAR(32), 
					   IN desc VARCHAR(128),
					   IN length INTEGER,
					   IN prec INTEGER 
					   )
DYNAMIC RESULT SETS 1
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
BEGIN
	DECLARE metadataId BIGINT;
	
	CALL INCREMENT_COUNTER(7, metadataId);
	
	INSERT INTO SPFB_METADATA(ID_METADATA, ID_METADATA_TYPE, METADATA_DESCRIPTION, METADATA_NAME, LENGTH, PRECISION) VALUES (metadataId, typeId, desc, metadtaName, length, prec);
	INSERT INTO SPFB_META_CLASS_STRUCT (ID_METADATA_CLASS, ID_METADATA, METADATA_ORDER) VALUES(classId, metadataId, 100); 
END;
/


CREATE PROCEDURE UPDATE_METADATA_DICT
------------------------------------------------------------------------
-- SQL Stored Procedure 
------------------------------------------------------------------------
BEGIN
	DECLARE classId BIGINT;
	
------------------------------------------------------------------------
-- System Metadata Class SPFB_FILESET_SYS_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_FILESET_SYS_MD', 1, '', 'Filebox Fileset System Metadata');
	
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'CREATION_DATE', 'Fileset Creation Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'END_DATE', 'Fileset Expiration Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'LAST_UPDATE', 'Fileset Date of last Update',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'DESCRIPTION', 'Fileset Description',  500, 0);
	
------------------------------------------------------------------------
-- System Metadata Class SPFB_FILES_SYS_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_FILES_SYS_MD', 1, '', 'Filebox Fileset Files System Metadata');

	CALL INSERT_METADATA_IN_DICT(classId, 6, 'CREATION_DATE', 'File Creation Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'END_DATE', 'File Expiration Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'LAST_UPDATE', 'File Date of last Update',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'ORIGINAL_FILE_NAME', 'Original File name',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'FILE_HASH', 'File content HASH',  40, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'FILE_URL', 'Original File URL',  40, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'FILE_URN', 'Original File URN',  40, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 7, 'FILE_SIZE', 'File size',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'BLOCK_SIZE', 'File block size',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'FILE_TYPE', 'File type ID',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'REC_TYPE', 'File rec type ID',  0, 0);

------------------------------------------------------------------------
-- Metadata Class for FSEE
------------------------------------------------------------------------
	
------------------------------------------------------------------------
-- System View Metadata Class SPFB_FILESET_MON_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_FILESET_MON_MD', 3, '', 'Filebox Fileset Monitor Metadata');
	
	CALL INSERT_METADATA_IN_DICT(classId, 7,  'FSEE_UNIQUE_ID', 'Fileset Monitor Unique File Id',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'FILE_NAME', 'Fileset Monitor File Name',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'FILE_IDENTITY', 'File Unique Id form Host',  64, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2,  'FILESET_STATUS', 'Fileset Monitor Fileset Status',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2,  'EXPORT_STATUS', 'Fileset Monitor Fileset Export Status',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'HOST_NAME', 'Fileset Monitor Host Name',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'PLATFORM', 'Fileset Monitor Host Platform',  32, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2,  'USAGE_COUNT', 'Fileset Monitor Fileset Usage Counter',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'CREATION_TS', 'Fileset Monitor Creation Timestamp',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'LAST_OPER_TS', 'Fileset Monitor Last Operation Timestamp',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'DELETE_TS', 'Fileset Monitor Delete Timestamp',  0, 0);

------------------------------------------------------------------------
-- System View Metadata Class SPFB_FILESET_LOG_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_FILESET_LOG_MD', 3, '', 'Filebox Fileset Log Metadata');
	
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'FB_TIMESTAMP', 'Fileset Log Timestamp',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2,  'OPERATION', 'Fileset Log Operation',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'SYSTEM_ID', 'Fileset Log System Id',  32, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'SYSPLEX_NAME', 'Sysplex Name from Host',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'JOB_NAME', 'Fileset Log Job Name',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'STEP_NAME', 'Fileset Log Step Name',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'PGM_NAME', 'Fileset Log Program name',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'TRANSFER_ID', 'Fileset Log Transport unique id',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'HOST_NAME', 'Fileset Monitor Host Name',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'JES2_JOB_ID', 'Fileset Log JES2 job id',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'USER_ID', 'Fileset Log User Id',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'OPEN_TYPE', 'Fileset Log File Open Type',  32, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'OPEN_DISP', 'Fileset Log File Open Disposition',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'DD_NAME', 'Fileset Log DDName',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'MEMBER_NAME', 'Fileset Log Menber Name',  8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'FILE_ORG', 'Fileset Log File Organization',  2, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'FILE_RECFM', 'Fileset Log File Record Format',  4, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'OPER_TIMESTAMP', 'Fileset Log Host Operation Timestamp',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'JOB_TIMESTAMP_ID', 'Fileset Log Job Timestamp',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 7,  'FILE_SIZE', 'Fileset Log File Size',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 7,  'NEW_FILESET_ID', 'Fileset Log Link to a New Fileset',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 7,  'NEW_FILE_ID', 'Fileset Log Link to a New File',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 7,  'FLOW_INSTANCE_ID', 'Orchestration Suite Unique Id',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'PARENT_ID', 'Parent Process Id',  16, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'PROCESS_ID', 'Process Id',  16, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'THREAD_ID', 'Process Thread Id',  16, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'OLD_FILE_NAME', 'Old filename before rename',  256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1,  'OLD_FILE_IDENTITY', 'File Unique Id form Host',  64, 0);
		
------------------------------------------------------------------------
-- Metadata Class for SPAZIO 2
------------------------------------------------------------------------

------------------------------------------------------------------------
-- Protected Metadata Class SPFB_SP2_FILE_SYS_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_SP2_FILE_SYS_MD', 2, 'com.primeur.spmfts.db.jpa.SpfbSp2FileSysMd', 'Filebox Spazio 2 Files System Metadata');
	
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'NODE_NAME', 'Spazio 2 File NodeName', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'QUEUE_MANAGER_NAME', 'Spazio 2 File QueueManagerName', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'QUEUE_NAME', 'Spazio 2 File QueueName', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'ADDRESS_TYPE', 'Spazio 2 File AddressType', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'INTERNAL_NUMBER', 'Spazio 2 File Internal Number', 18, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'MESSAGE_FILE_ID', 'Spazio 2 Message File Id', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'CORRELATION_ID', 'Spazio 2 File Correlation Id', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'SENDER', 'Spazio 2 File Sender', 10, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'USER_CLASS', 'Spazio 2 File User Class', 6, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'DESTINATION_FILENAME', 'Spazio 2 File Destination FileName', 258, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'DESCRIPTION', 'Spazio 2 File Description', 66, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'START_PUT_DATE', 'File Start Put Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'EXPIRY_DATE', 'File Expiry Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'DESTINATION_PATHNAME', 'Spazio 2 File Destination Path Name (4200-500-2010)', 258, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'ORIGINAL_FILENAME', 'Spazio 2 File Original File Name (4100-500-2010)', 258, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'CODEPAGE', 'Spazio 2 File CodePAge', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'EOR_EOF', 'Spazio 2 File Eor and Eof', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'PRIORITY', 'Spazio 2 File Priority', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 7, 'FILE_LENGTH', 'Spazio 2 File FileLen', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'USER_ID', 'Spazio 2 File UserId', 18, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'SESSION_ID', 'Spazio 2 File SESSION_ID', 10, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'FIRST_READ_DATE', 'File First Read Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'LAST_READ_DATE', 'File Last Read Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 6, 'ARRIVAL_DATE', 'File Arrival Date',  0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'BINARY_FILE', 'Spazio 2 File Binary', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'Z_COMPRESS', 'Spazio 2 File Zlib Compression', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'DSTK', 'Spazio 2 File DSTK', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'LOCALLY_EXTERNAL', 'Spazio 2 File Locally External', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 2, 'DESTINATION_EXTERNAL', 'Spazio 2 File Destination External', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'ORIGIN_QUEUE_MANAGER', 'Spazio 2 File Original Queue Manager', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'ORIGIN_QUEUE', 'Spazio 2 File Original Queue', 50, 0);

------------------------------------------------------------------------
-- Protected Metadata Class SPFB_SP2_SEL_SYS_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_SP2_SEL_SYS_MD', 2, 'com.primeur.spmfts.db.jpa.SpfbSp2SelSysMd',  'Filebox Spazio 2 Selectors System Metadata');

	CALL INSERT_METADATA_IN_DICT(classId,  1, 'AREA_TYPE' , 'Spazio 2 System/User area indicator', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'SEL_CODE'  , 'Spazio 2 simple/compound Selector (Code 4100-500-2010)', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'SEL_TYPE'  , 'Spazio 2 Selector Type', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  2, 'SEL_LENGTH', 'Spazio 2 Selector Length', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'SEL_NAME'  , 'Spazio 2 linearized Selector Identifier', 50, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 11, 'SEL_VALUE' , 'Spazio 2 Selector Value', 64000, 0);
	
------------------------------------------------------------------------
-- Metadata Class for SPAZIO E-MAIL
------------------------------------------------------------------------

------------------------------------------------------------------------
-- System Metadata Class SPFB_MAILOFF
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_MAILOFF', 2, '', 'AdHoc File Transfer Metadata');
		
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_TO', 'Destination mail address', 4000, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_CC', 'Cc Destination mail address', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_BCC', 'Bcc Destination mail address', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_OTP', 'One Time Password', 128, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_FROM', 'Sender mail address', 128, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_DATE', 'Date', 128, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_SUBJECT', 'Mail subject', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'AH_BODY', 'Mail Text', 4000, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 4, 'AH_BODY_BLOB', 'Mail Text Overflow', 128000, 0);
	
------------------------------------------------------------------------
-- Metadata Class for DROP FILE
------------------------------------------------------------------------

------------------------------------------------------------------------
-- System Metadata Class SPFB_DROP_FILE_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_MD', 2, '', 'Drop File root Transfer Metadata');
		
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'TRANSFER_ID', 'Unique Transfer Identifier', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'FB_TIMESTAMP', 'Insert date', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'END_DATE', 'Transfer End Date', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'SENDER_USER', 'Sender Username', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'SENDER_EMAIL', 'Sender E-mail address', 512, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'SENDER_SUBJECT', 'Transfer Subjet', 128, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'SENDER_MESSAGE', 'Transfer Body Message', 4000, 0);

------------------------------------------------------------------------
-- System Metadata Class SPFB_DROP_FILE_RECIPIENTS_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_RECIPIENTS_MD', 1, '', 'Drop File Transfer Recipient Metadata');
		
------------------------------------------------------------------------
-- System Metadata Class SPFB_DROP_FILE_FILES_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_FILES_MD', 1, '', 'Drop File Transfer Files Metadata');
		
------------------------------------------------------------------------
-- System Metadata Class SPFB_DROP_FILE_DOWNLOAD_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_DOWNLOAD_MD', 1, '', 'Drop File Download Files Metadata');
		
------------------------------------------------------------------------
-- System View Metadata Class SPFB_DROP_FILE_TRANSFER_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_TRANSFER_MD', 3, '', 'Drop File Download Files Metadata');
		
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'TRANSFER_ID', 'Transfer Id', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  2, 'TRANSFER_STATUS', 'Transfer Status', 4, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  2, 'PUBLIC_SHARE', 'Transfer is Public', 4, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'END_DATE', 'Transfer End Date', 0, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'SENDER_EMAIL', 'Transfer Sender e-mail', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'RECIPIENT_EMAIL', 'Transfer Recipient e-mail', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'FILE_NAME', 'Transfer Recipient File Name', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  1, 'FILE_URL', 'Transfer Recipient File Url', 512, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  7, 'FILE_SIZE', 'Transfer Recipient File Size', 8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'DOWNLOAD_TIME', 'Transfer Recipient File Download Ts', 8, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 10, 'FILE_END_DATE', 'Transfer Recipient End Date Ts', 8, 0);
	CALL INSERT_METADATA_IN_DICT(classId,  2, 'DAYS_LEFT', 'Transfer Recipient Left Before End', 4, 0);

------------------------------------------------------------------------
-- System Metadata Class SPFB_DROP_FILE_USERS_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_USERS_MD', 2, 'com.primeur.spmfts.db.jpa.SpfbDropFileUsersMd', 'Drop File Users Metadata');
		
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'USER_NAME', 'Username', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'FIRST_NAME', 'First Name', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'LAST_NAME', 'Last Name', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'COMPANY', 'Company', 128, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'USER_EMAIL', 'User mail address', 128, 0);

------------------------------------------------------------------------
-- System Metadata Class SPFB_DROP_FILE_USER_CONFIG_MD
------------------------------------------------------------------------
	CALL INCREMENT_COUNTER(6, classId);
	CALL INSERT_CLASS_IN_DICT(classId, 'SPFB_DROP_FILE_USER_CONFIG_MD', 2, 'com.primeur.spmfts.db.jpa.SpfbDropFileUserConfigMd', 'Drop File Users Configuration Metadata');
		
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'CONFIG_PARAM', 'User Config Parameter', 256, 0);
	CALL INSERT_METADATA_IN_DICT(classId, 1, 'CONFIG_VALUE', 'Config Value', 256, 0);

END;
/

CALL UPDATE_METADATA_DICT;
COMMIT;
	

DROP PROCEDURE INCREMENT_COUNTER (INTEGER, BIGINT);
DROP PROCEDURE INSERT_CLASS_IN_DICT (BIGINT, VARCHAR(256), INTEGER, VARCHAR(256), VARCHAR(256));
DROP PROCEDURE INSERT_METADATA_IN_DICT (BIGINT, INTEGER, VARCHAR(32), VARCHAR(128), INTEGER, INTEGER);
DROP PROCEDURE UPDATE_METADATA_DICT;

COMMIT;
